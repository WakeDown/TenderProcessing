@using System.Web.Script.Serialization
@using System.Web.UI.WebControls
@using TenderProcessingDataAccessLayer.Models
@{
    ViewBag.Title = "Карточка заявки";
    Layout = "~/Views/Shared/_MasterPage.cshtml";
    var serializer = new JavaScriptSerializer();
    var managers = (List<Manager>)ViewBag.Managers;
    var dealTypes = (List<DealType>)ViewBag.DealTypes;
    var claimStatus = (List<ClaimStatus>)ViewBag.ClaimStatus;
    var productManagers = (List<ProductManager>)ViewBag.ProductManagers;
    var claim = (TenderClaim)ViewBag.Claim;
    var history = (List<ClaimStatusHistory>)ViewBag.StatusHistory;
    var facts = (List<ProtectFact>)ViewBag.Facts;
}
<link href="~/Content/bootstrap-datepicker3.css" rel="stylesheet" />
<script src="~/Scripts/bootstrap-datepicker.js"></script>
<script type="text/javascript">
    var managers = @Html.Raw(serializer.Serialize(managers));
    var dealTypes = @Html.Raw(serializer.Serialize(dealTypes));
    var claimStatus = @Html.Raw(serializer.Serialize(claimStatus));
    var productManagers = @Html.Raw(serializer.Serialize(productManagers));
    var dateStart = "@ViewBag.DateStart.ToString()";
    var claim = @Html.Raw(serializer.Serialize(claim));
    var histories = @Html.Raw(serializer.Serialize(history));
    var currencies = @Html.Raw(serializer.Serialize(ViewBag.Currencies));
    var facts = @Html.Raw(serializer.Serialize(facts));
    var hasTransmissedPosition = @ViewBag.HasTransmissedPosition;
    var initClaimIdNedded = false;
    var errorLoad = @ViewBag.Error;

    $(init);

    function init() {
        if (errorLoad) {
            alert("Произошла ошибка при загрузке");
            return;
        }
        $.fn.datepicker.dates['ru'] = {
            days: ["Воскресенье", "Понедельник", "Вторник", "Среда", "Четверг", "Пятница", "Суббота", "Воскресенье"],
            daysShort: ["Вск", "Пнд", "Втр", "Срд", "Чтв", "Птн", "Суб", "Вск"],
            daysMin: ["Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб", "Вс"],
            months: ["Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь"],
            monthsShort: ["Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек"],
            today: "Сегодня"
        };
        messageUi.initProgressImage();
        window.addEventListener("message", messageHandler, true);
        if (claim != null && claim.ClaimStatus == 1) {
            $("#excelPanel").show();
        } else {
            $("#excelPanel").hide();
        }
        initManagersList();
        initDealTypesList();
        $("#tenderStart").datepicker({
            format: "dd.mm.yyyy",
            autoclose: true,
            todayBtn: "linked",
            language: "ru"
        });
        $("#kPDeadline").datepicker({
            format: "dd.mm.yyyy",
            autoclose: true,
            todayBtn: "linked",
            language: "ru"
        });
        $("#claimDeadline").datepicker({
            format: "dd.mm.yyyy",
            autoclose: true,
            todayBtn: "linked",
            language: "ru"
        });
        $("#deliveryDate").datepicker({
            format: "dd.mm.yyyy",
            autoclose: true,
            todayBtn: "linked",
            language: "ru"
        });
        $("#auctionDate").datepicker({
            format: "dd.mm.yyyy",
            autoclose: true,
            todayBtn: "linked",
            language: "ru"
        });
        $("#tenderStart").add("#kPDeadline").add("#claimDeadline").add("#deliveryDate").add("#auctionDate").change(function(e) {
            var datepicker = $(e.currentTarget);
            var dt = datepicker.datepicker("getDate");
            var dateString = getDateString(dt);
            datepicker.val(dateString);
        });
        $("#butСlaimStatusCanceled").click(setClaimCancelled);
        $("#butСlaimStatusStopped").click(setClaimStopped);
        $("#butСlaimStatusContined").click(setClaimContined);
        $("#butGetCalculateFile").click(getCalculateExcelFileFromServer);
        $("#butGetCalculateOnlyCalculateFile").click(getCalculateOnlyCalculateExcelFileFromServer);
        $("#tenderStart").val(dateStart);
        $("#butGetFile").click(getExcelFileFromServer);
        $("#butUploadFile").click(openFile);
        $("#butSaveClaim").click(saveClaim);
        $("#butSetClaimOnWork").click(setClaimOnWork);
        $("#cbSelectAllPosition").change(selectAllPosition);
        $("#butRejectPositionOk").click(rejectPositionOk);
        var unitList = getUnitsList(null);
        $("#unitCell").append(unitList);
        var managersList = getProductManagersList(null);
        $("#managersCell").append(managersList);
        var currenciesList = getCurrenciesList(null);
        $("#currencyCell").append(currenciesList);
        $("#butAddPosition").click(addPositionButtonClick);
        $("[modetype='addPositionButtonOK']").click(addPosition);
        $("[modetype='addPositionButtonCancel']").click(addPositionCancel);
        $("#butSetPositionReject").click(rejectPositions);
        $("#butSetPositionConfirm").click(setAllPositionConfirmed);
        $("#butChangeCurrency").click(changeCurrency);
        if (claim != null) {
            $("#claimId").text("Заявка №" + claim.Id);
            if (claim.Positions != null) {
                var container = $("#positionTable");
                var positionsLength = claim.Positions.length;
                for (var i = 0; i < positionsLength; i++) {
                    var position = claim.Positions[i];
                    var element = getPositionElement(position);
                    container.append(element);
                    var calculateRowTable = getCalculateTableForPosition(position);
                    container.append(calculateRowTable);
                    var calculateTabel = calculateRowTable.find("table");
                    var lastElement = null;
                    if (position.Calculations != null) {
                        var calculationsLength = position.Calculations.length;
                        for (var j = 0; j < calculationsLength; j++) {
                            var calculate = position.Calculations[j];
                            var calculateRow = getElementForCalculate(calculate);
                            calculateRow.attr("calcPositionId", position.Id);
                            if (lastElement == null) {
                                calculateTabel.append(calculateRow);
                                lastElement = calculateRow;
                            } else {
                                lastElement.after(calculateRow);
                                lastElement = calculateRow;   
                            }
                        }
                    }
                }
            }
            showClaimReadOnly(claim);
            $("#butSaveClaim").hide();
            $("#butSetClaimOnWork").show();
            $("#excelPanel").show(250);
            $("#positionPanel").show(250);
            $("#butChangeCurrency").show();
            initClaimIdNedded = true;
            if (claim.ClaimStatus > 1) {
                var status = getClaimStatusById(claim.ClaimStatus);
                if (status == null) {
                    status = { Value: "Неопределен" };
                }
                $("#claimStatus").text(status.Value);
                $("#butSetClaimOnWork").hide();
                $("#addPositionRow").remove();
                $("#butAddPosition").remove();
                var cancelEditButtons = $("[modeType='editButtonCancel']", $("#positionTable"));
                $.each(cancelEditButtons, function(index, elem) {
                    $(elem).click();
                });
                var editButtons = $("[modeType='editButton']", $("#positionTable"));
                $.each(editButtons, function(index, elem) {
                    $(elem).remove();
                });
                var editPanels = $("[type='editActionPanel']", $("#positionTable"));
                $.each(editPanels, function(index, elem) {
                    $(elem).remove();
                });
                var deleteButtons = $("[modeType='deleteButton']", $("#positionTable"));
                $.each(deleteButtons, function(index, elem) {
                    $(elem).remove();
                });
                $("#excelPanel").hide();
                if (claim.ClaimStatus == 2 || claim.ClaimStatus == 3 || claim.ClaimStatus == 4 || claim.ClaimStatus == 6 || claim.ClaimStatus == 7) {
                    $("#claimStatusPanel").show();
                    if (claim.ClaimStatus == 4) {
                        $("#butСlaimStatusStopped").hide();
                    } else {
                        $("#butСlaimStatusContined").hide();
                    }
                }
                if (claim.ClaimStatus == 8) {
                    $("#butSetPositionReject").hide();
                    $("#butSetPositionConfirm").hide();
                    $("[modetype='selectPositionElement']", $("#positionTable")).hide();
                    $("#cbSelectAllPosition").hide();
                }
                $("#excelCalculatePanel").show();
            }
            initStatusHistory();
            setInfoForPositionRows();
        }
        if (!hasTransmissedPosition) {
            $("#butSetPositionReject").hide();
            $("#butSetPositionConfirm").hide();
        }
    }

    //>>>>>работа с заявкой<<<<<
    //действия
    function setClaimContined(e) {
        var comment = $("#claimStatusComment").val().trim();
        var model = {
            Comment: comment,
            IdClaim: claim.Id
        }
        messageUi.progressShow();
        $.ajax({
            url: "/Claim/SetClaimContinued",
            type: 'POST',
            dataType: 'json',
            data: JSON.stringify(model),
            processData: false,
            contentType: 'application/json; charset = utf-8 ',
            success: function(data) {
                messageUi.progressHide();
                if (data.IsComplete) {
                    if (data.Model != null) {
                        claim.ClaimStatus = data.Model.Status.Id;
                        var status = getClaimStatusById(claim.ClaimStatus);
                        if (status == null) {
                            status = { Value: "Неопределен" };
                        }
                        $("#claimStatus").text(status.Value);
                        addClaimStatusHistoryElement(data.Model);
                    }
                    $("#butСlaimStatusStopped").show();
                    $("#butСlaimStatusContined").hide();
                    
                } else {
                    showMessage("Ошибка");
                }
            }
        });
    }

    function setClaimCancelled(e) {
        var comment = $("#claimStatusComment").val().trim();
        var model = {
            Comment: comment,
            IdClaim: claim.Id
        }
        messageUi.progressShow();
        $.ajax({
            url: "/Claim/SetClaimCancelled",
            type: 'POST',
            dataType: 'json',
            data: JSON.stringify(model),
            processData: false,
            contentType: 'application/json; charset = utf-8 ',
            success: function(data) {
                messageUi.progressHide();
                if (data.IsComplete) {
                    if (data.Model != null) {
                        claim.ClaimStatus = data.Model.Status.Id;
                        var status = getClaimStatusById(claim.ClaimStatus);
                        if (status == null) {
                            status = { Value: "Неопределен" };
                        }
                        $("#claimStatus").text(status.Value);
                        addClaimStatusHistoryElement(data.Model);
                    }
                    $("#claimStatusPanel").remove();
                } else {
                    showMessage("Ошибка");
                }
            }
        });
    }

    function setClaimStopped(e) {
        var comment = $("#claimStatusComment").val().trim();
        var model = {
            Comment: comment,
            IdClaim: claim.Id
        }
        messageUi.progressShow();
        $.ajax({
            url: "/Claim/SetClaimStopped",
            type: 'POST',
            dataType: 'json',
            data: JSON.stringify(model),
            processData: false,
            contentType: 'application/json; charset = utf-8 ',
            success: function(data) {
                messageUi.progressHide();
                if (data.IsComplete) {
                    if (data.Model != null){
                        claim.ClaimStatus = data.Model.Status.Id;
                        var status = getClaimStatusById(claim.ClaimStatus);
                        if (status == null) {
                            status = { Value: "Неопределен" };
                        }
                        $("#claimStatus").text(status.Value);
                        addClaimStatusHistoryElement(data.Model);
                    }
                    $("#butСlaimStatusStopped").hide();
                    $("#butСlaimStatusContined").show();
                    $("#claimStatusComment").val("");
                } else {
                    showMessage("Ошибка");
                }
            }
        });
    }

    function setClaimOnWork(e) {
        messageUi.progressShow();
        $.ajax({
            url: "/Claim/SetClaimOnWork?id=" + claim.Id,
            type: 'GET',
            contentType: 'application/json; charset = utf-8 ',
            success: function(data) {
                messageUi.progressHide();
                if (data.IsComplete) {
                    if (data.Model != null) {
                        claim.ClaimStatus = data.Model.Status.Id;
                        var status = getClaimStatusById(claim.ClaimStatus);
                        if (status == null) {
                            status = { Value: "Неопределен" };
                        }
                        $("#claimStatus").text(status.Value);
                        addClaimStatusHistoryElement(data.Model);
                    }
                    $("#butSetClaimOnWork").hide();
                    $("#addPositionRow").remove();
                    $("#butAddPosition").remove();
                    var cancelEditButtons = $("[modeType='editButtonCancel']", $("#positionTable"));
                    $.each(cancelEditButtons, function(index, elem) {
                        $(elem).click();
                    });
                    var editButtons = $("[modeType='editButton']", $("#positionTable"));
                    $.each(editButtons, function(index, elem) {
                        $(elem).remove();
                    });
                    var editPanels = $("[type='editPositionPanel']", $("#positionTable"));
                    $.each(editPanels, function(index, elem) {
                        $(elem).remove();
                    });
                    var deleteButtons = $("[modeType='deleteButton']", $("#positionTable"));
                    $.each(deleteButtons, function(index, elem) {
                        $(elem).remove();
                    });
                    $("#excelPanel").hide();
                    $("#claimStatusPanel").show();
                    $("#butСlaimStatusContined").hide();
                } else {
                    if (data.Message == null || data.Message.trim() == "") {
                        showMessage("Ошибка при передачи заявки в работу");
                    } else {
                        showMessage(data.Message);
                    }
                }
            }
        });
    }

    function saveClaim() {
        var validModel = isValidClaim();
        if (!validModel.isValid) {
            showMessage(validModel.message);
            return;
        }
        var tenderNumber = $("#tenderNumber").val();
        var tenderStart = $("#tenderStart").val();
        var claimDeadLine = $("#claimDeadline").val();
        var kpDeadLine = $("#kPDeadline").val();
        var customer = $("#customer").val();
        var customerInn = $("#innCustomer").val();
        var sum = Number($("#sum").val().replace(",", "."));
        var comment = $("#comment").val();
        var dealType = Number($(":selected", $("#listDealTypes")).val());
        var tenderUrl = $("#tenderUrl").val();
        var managerId = $(":selected", $("#listManagers")).val();
        var managerSubDivision = $("#managerSubDivision").text();
        var usd = $("#currencyUsd").val().trim().replace(",", ".");
        var eur = $("#currencyEur").val().trim().replace(",", ".");
        var deliveryPlace = $("#deliveryPlace").val().trim();
        var deliveryDate = $("#deliveryDate").val().trim();
        var auctionDate = $("#auctionDate").val().trim();
        if (usd == "") usd = 0;
        if (eur == "") eur = 0;
        var model = {
            TenderNumber: tenderNumber,
            TenderStartString: tenderStart,
            ClaimDeadlineString: claimDeadLine,
            KPDeadlineString: kpDeadLine,
            Comment: comment,
            Customer: customer,
            CustomerInn: customerInn,
            Sum: sum,
            DealType: dealType,
            TenderUrl: tenderUrl,
            CurrencyUsd: Number(usd),
            CurrencyEur: Number(eur),
            DeliveryDateString: deliveryDate,
            DeliveryPlace: deliveryPlace,
            AuctionDateString: auctionDate,
            Manager: { Id: managerId, SubDivision: managerSubDivision }
        };
        messageUi.progressShow();
        $.ajax({
            url: "/Claim/SaveClaim",
            type: 'POST',
            dataType: 'json',
            data: JSON.stringify(model),
            processData: false,
            contentType: 'application/json; charset = utf-8 ',
            success: saveClaimComplete
        });
    }

    function saveClaimComplete (data) {
        messageUi.progressHide();
        if (data.IsComplete) {
            claim = data.Model;
            showClaimReadOnly(claim);
            $("#claimId").text("Заявка № " + claim.Id);
            $("#butSaveClaim").hide();
            $("#butSetClaimOnWork").show();
            $("#excelPanel").show(250);
            $("#positionPanel").show(250);
            $("#butChangeCurrency").show();
            if (data.StatusHistory != null) addClaimStatusHistoryElement(data.StatusHistory);
            var obj = {
                type: "setClaimId",
                error: false,
                message: claim.Id
            }
            var message = JSON.stringify(obj);
            sendMessage(message);
        } else {
            showMessage("Ошибка при сохранении заявки");
        }
    }

    function changeCurrency(e) {
        var usd = $("#currencyUsd").val().trim().replace(",", ".");
        var eur = $("#currencyEur").val().trim().replace(",", ".");
        if (usd == "" && eur == "") {
            alert("Введите значения валют");
            return;
        }
        if (usd == "") usd = 0;
        if (eur == "") eur = 0;
        var model = {
            Id: claim.Id,
            CurrencyUsd: Number(usd),
            CurrencyEur: Number(eur)
        };
        messageUi.progressShow();
        $.ajax({
            url: "/Claim/UpdateClaimCurrency",
            type: 'POST',
            dataType: 'json',
            data: JSON.stringify(model),
            processData: false,
            contentType: 'application/json; charset = utf-8 ',
            success: function(data) {
                messageUi.progressHide();
                if (!data.IsComplete) {
                    alert("Ошибка при изменении курса валют");
                }
            }
        });
    }

    //проверка валидности введенных значений по заявке
    function isValidClaim() {
        var obj = { isValid: true, message: "" };
        var message = "";
        var tenderStart = $("#tenderStart").val();
        var claimDeadLine = $("#claimDeadline").val();
        var kpDeadLine = $("#kPDeadline").val();
        var customer = $("#customer").val();
        var customerInn = $("#innCustomer").val();
        var sum = $("#sum").val();
        var usd = $("#currencyUsd").val();
        var eur = $("#currencyEur").val(); 
        if (tenderStart.trim() == "") {
            obj.isValid = false;
            obj.message = "Заполните поле Дата начала";
        }
        if (claimDeadLine.trim() == "") {
            message = "Заполните поле Срок сдачи";
            if (obj.message.trim() != "") {
                message = "\r" + message;
            }
            obj.isValid = false;
            obj.message += message;
        }
        if (kpDeadLine.trim() == "") {
            message = "Заполните поле Срок сдачи КП";
            if (obj.message.trim() != "") {
                message = "\r" + message;
            }
            obj.isValid = false;
            obj.message += message;
        }
        if (customer.trim() == "") {
            message = "Заполните поле Заказчик";
            if (obj.message.trim() != "") {
                message = "\r" + message;
            }
            obj.isValid = false;
            obj.message += message;
        }
        if (customerInn.trim() == "") {
            message = "Заполните поле ИНН заказчика";
            if (obj.message.trim() != "") {
                message = "\r" + message;
            }
            obj.isValid = false;
            obj.message += message;
        }
        sum = sum.replace(",", ".");
        if (sum.trim() != "") {
            if (isNaN(Number(sum))) {
                message = "Значение '" + sum + "' в поле Сумма с НДС не является числом";
                if (obj.message.trim() != "") {
                    message = "\r" + message;
                }
                obj.isValid = false;
                obj.message += message;
            }
        }
        usd = usd.replace(",", ".");
        if (usd.trim() != "") {
            if (isNaN(Number(usd))) {
                message = "Значение '" + usd + "' в поле Курс USD не является числом";
                if (obj.message.trim() != "") {
                    message = "\r" + message;
                }
                obj.isValid = false;
                obj.message += message;
            }
        }
        eur = eur.replace(",", ".");
        if (eur.trim() != "") {
            if (isNaN(Number(eur))) {
                message = "Значение '" + eur + "' в поле Курс EUR не является числом";
                if (obj.message.trim() != "") {
                    message = "\r" + message;
                }
                obj.isValid = false;
                obj.message += message;
            }
        }
        var manager = $(":selected", $("#listManagers")).val();
        if (manager == "null") {
            message = "Выберите менеджера";
            if (obj.message.trim() != "") {
                message = "\r" + message;
            }
            obj.isValid = false;
            obj.message += message;
        }
        var dealType = $(":selected", $("#listDealTypes")).val();
        if (dealType == "null") {
            message = "Выберите тип сделки";
            if (obj.message.trim() != "") {
                message = "\r" + message;
            }
            obj.isValid = false;
            obj.message += message;
        }
        return obj;
    }

    //перевод заявки в режим просмотра
    function showClaimReadOnly(model) {
        var controlNames = ["#tenderNumber", "#tenderStart", "#claimDeadline", "#kPDeadline", "#customer", "#innCustomer", "#sum", "#comment", "#listDealTypes", "#tenderUrl", "#listManagers", "#managerSubDivision", "#deliveryDate", "#deliveryPlace", "#auctionDate"];
        var controlsLength = controlNames.length;
        for (var i = 0; i < controlsLength; i++) {
            $(controlNames[i]).css("display", "none");
            $(controlNames[i] + "Label").css("display", "block");
        }
        $("#tenderNumberLabel").text(model.TenderNumber != null ? model.TenderNumber : "");
        $("#tenderStartLabel").text(model.TenderStartString);
        $("#claimDeadlineLabel").text(model.ClaimDeadlineString);
        $("#kPDeadlineLabel").text(model.KPDeadlineString);
        $("#deliveryDateLabel").text(model.DeliveryDateString);
        $("#auctionDateLabel").text(model.AuctionDateString);
        $("#deliveryPlaceLabel").text(model.DeliveryPlace);
        $("#customerLabel").text(model.Customer);
        $("#innCustomerLabel").text(model.CustomerInn);
        var sum = "";
        if (model.Sum != 0) {
            sum = model.Sum.toFixed(2);
        }
        $("#sumLabel").text(sum);
        var usd = "";
        if (model.CurrencyUsd != 0) {
            usd = model.CurrencyUsd.toFixed(2);
        }
        $("#currencyUsd").val(usd);
        var eur = "";
        if (model.CurrencyEur != 0) {
            eur = model.CurrencyEur.toFixed(2);
        }
        $("#currencyEur").val(eur);
        $("#commentLabel").text(model.Comment != null ? model.Comment : "");
        var dealType = getDealTypeById(model.DealType);
        $("#listDealTypesLabel").text(dealType.Value);
        $("#tenderUrlLabel").text(model.TenderUrl != null ? model.TenderUrl : "");
        $("#listManagersLabel").text(getManagerById(model.Manager.Id).ShortName);
        $("#managerSubDivisionLabel").text(model.Manager.SubDivision);
        var status = getClaimStatusById(model.ClaimStatus);
        if (status == null) {
            status = { Value: "Неопределен" };
        }
        $("#claimStatus").text(status.Value);
    }

    //<<<<<Позиции заявки>>>>>>
    //действия
    function setAllPositionConfirmed(e) {
        messageUi.progressShow();
        $.ajax({
            url: "/Claim/SetClaimAllPositonConfirmed?idClaim=" + claim.Id,
            type: 'GET',
            contentType: 'application/json; charset = utf-8 ',
            success: function(data) {
                messageUi.progressHide();
                if (data.IsComplete) {
                    if (data.Model != null) {
                        claim.ClaimStatus = data.Model.Status.Id;
                        var status = getClaimStatusById(claim.ClaimStatus);
                        if (status == null) {
                            status = { Value: "Неопределен" };
                        }
                        $("#claimStatus").text(status.Value);
                        addClaimStatusHistoryElement(data.Model);
                    }
                    var positionsRows = $("[type='positionRow']", $("#positionTable"));
                    var color = getColorForPositionState(4);
                    positionsRows.css("backgroundColor", color);
                    $("#butSetPositionReject").hide();
                    $("#butSetPositionConfirm").hide();
                    $("#claimStatusPanel").hide();
                    $("[modetype='selectPositionElement']", $("#positionTable")).hide();
                    $("#cbSelectAllPosition").hide();
                } else {
                    if (data.Message != "") {
                        showMessage(data.Message);
                    } else {
                        showMessage("Ошибка с подтверждением");   
                    }
                }
            }
        });
    }

    function rejectPositionOk(e) {
        $('#rejectPositionCommentBox').modal("hide");
        var rejectPostionsId = $("#rejectPositionCommentBox").attr("rejectedId");
        var arrIds = rejectPostionsId.split(",");
        var comment = $("#rejectPositionComment").val().trim();
        messageUi.progressShow();
        $.ajax({
            url: "/Claim/SetPositonRejected?comment=" + encodeURI(comment) + "&idClaim=" + claim.Id,
            type: 'POST',
            dataType: 'json',
            data: JSON.stringify(arrIds),
            processData: false,
            contentType: 'application/json; charset = utf-8 ',
            success: function(data) {
                messageUi.progressHide();
                if (data.IsComplete) {
                    if (data.Model != null) {
                        claim.ClaimStatus = data.Model.Status.Id;
                        var status = getClaimStatusById(claim.ClaimStatus);
                        if (status == null) {
                            status = { Value: "Неопределен" };
                        }
                        $("#claimStatus").text(status.Value);
                        addClaimStatusHistoryElement(data.Model);
                    }
                    var positionsRows = $("[type='positionRow']", $("#positionTable"));
                    $.each(positionsRows, function(index, element) {
                        element = $(element);
                        var positionId = element.attr("positionId");
                        if ($.inArray(positionId, arrIds) != -1) {
                            var color = getColorForPositionState(3);
                            element.css("backgroundColor", color);
                            var initalColor = element.css("backgroundColor");
                            element.attr("initalColor", initalColor);
                        }
                    });
                } else {
                    showMessage("Ошибка");
                }
            }
        });
    }

    function rejectPositions() {
        var positionsId = [];
        var positionsRows = $("[type='positionRow']", $("#positionTable"));
        $.each(positionsRows, function(index, element) {
            element = $(element);
            var isChecked = $("[modetype='selectPositionElement']", element).get(0).checked;
            if (isChecked) {
                positionsId.push(Number(element.attr("positionId")));
            }
        });
        if (positionsId.length == 0) {
            alert("Не отмечено ни одной позиции");
        } else {
            var rejectPostionsId = positionsId.join(",");
            $("#rejectPositionCommentBox").attr("rejectedId", rejectPostionsId);
            $("#rejectPositionComment").val("");
            $('#rejectPositionCommentBox').modal("show");
        }
    }

    function addPositionButtonClick(e) {
        var row = $("#addPositionRow");
        $("[modeltype='rowNumberValue']", row).val("");
        $("[modeltype='catalogNumberValue']", row).val("");
        $("[modeltype='nameValue']", row).val("");
        $("[modeltype='replaceValue']", row).val("");
        $("[modeltype='valueValue']", row).val("");
        $("[modeltype='commentValuel']", row).val("");
        $("[modeltype='priceValue']", row).val("");
        $("[modeltype='sumValue']", row).val("");
        $("#addPositionRow").toggle();
    }

    function addPosition(e) {
        var row = $("#addPositionRow");
        var obj = getClaimPositionFromRow(row);
        if (obj.error) {
            showMessage(obj.message);
        } else {
            messageUi.progressShow();
            var model = obj.model;
            model.IdClaim = claim.Id;
            $.ajax({
                url: "/Claim/AddClaimPosition",
                type: 'POST',
                dataType: 'json',
                data: JSON.stringify(model),
                processData: false,
                contentType: 'application/json; charset = utf-8 ',
                success: function(data) {
                    messageUi.progressHide();
                    if (data.IsComplete) {
                        $("[modeltype='rowNumberValue']", row).val("");
                        $("[modeltype='catalogNumberValue']", row).val("");
                        $("[modeltype='nameValue']", row).val("");
                        $("[modeltype='replaceValue']", row).val("");
                        $("[modeltype='valueValue']", row).val("");
                        $("[modeltype='commentValue']", row).val("");
                        $("[modeltype='priceValue']", row).val("");
                        $("[modeltype='sumValue']", row).val("");
                        $("[modeltype='priceTzrValue']", row).val("");
                        $("[modeltype='sumTzrValue']", row).val("");
                        $("[modeltype='priceNdsValue']", row).val("");
                        $("[modeltype='sumNdsValue']", row).val("");
                        $("#addPositionRow").hide();
                        var container = $("#positionTable");
                        var element = getPositionElement(data.Model);
                        container.append(element);
                        setInfoForPositionRows();
                    } else {
                        showMessage("Ошибка при добавлении позиции спецификации");
                    }
                }
            });
        }
    }

    function addPositionCancel(e) {
        var row = $("#addPositionRow");
        $("[modeltype='rowNumberValue']", row).val("");
        $("[modeltype='catalogNumberValue']", row).val("");
        $("[modeltype='nameValue']", row).val("");
        $("[modeltype='replaceValue']", row).val("");
        $("[modeltype='valueValue']", row).val("");
        $("[modeltype='commentValuel']", row).val("");
        $("[modeltype='priceValue']", row).val("");
        $("[modeltype='sumValue']", row).val("");
        $("[modeltype='priceTzrValue']", row).val("");
        $("[modeltype='sumTzrValue']", row).val("");
        $("[modeltype='priceNdsValue']", row).val("");
        $("[modeltype='sumNdsValue']", row).val("");
        $("#addPositionRow").hide();
    }

    function deleteButtonClick(e) {
        e.stopImmediatePropagation();
        var button = $(e.currentTarget);
        var row = button.parent().parent();
        var id = Number(row.attr("positionId"));
        var initalBackGround = row.css("background-color");
        row.css("backgroundColor", "#EAA4A4");
        var deleted = confirm("Вы уверены что хотите удалить выделенную запись?");
        row.css("backgroundColor", initalBackGround);
        if (deleted) {
            messageUi.progressShow();
            $.ajax({
                url: "/Claim/DeleteClaimPosition?id=" + id,
                type: 'GET',
                contentType: 'application/json; charset = utf-8 ',
                success: function(data) {
                    messageUi.progressHide();
                    if (data.IsComplete) {
                        row.remove();
                        setInfoForPositionRows();
                    } else {
                        showMessage("Запись не удалена из БД");
                    }
                }
            });
        }
    }

    function editModeButtonClick(e) {
        e.stopImmediatePropagation();
        var button = $(e.currentTarget);
        var row = button.parent().parent().parent();
        row.attr("editMode", "true");
        button.hide();
        $("[type='editPositionActionPanel']", row).show();
        var controls = ["rowNumber", "catalogNumber", "name", "replace", "value", "comment", "price", "sum", "priceTzr", "sumTzr", "priceNds", "sumNds"];
        var controlsLength = controls.length;
        for (var i = 0; i < controlsLength; i++) {
            $("[modelType='" + controls[i] + "Value']", row).val($("[type='" + controls[i] + "Label']", row).text());
        }
        $("[type='editModeView']", row).show();
        $("[type='readOnlyModeView']", row).hide();
        selectListElement($("[type='unitsList']", row), $("[type='unitLabel']", row).attr("val"));
        selectListElement($("[type='productManagersList']", row), $("[type='productManagerLabel']", row).attr("val"));
        selectListElement($("[type='currenciesList']", row), $("[type='priceLabel']", row).attr("currency"));
    }

    function editButtonCancelClick(e) {
        e.stopImmediatePropagation();
        var button = $(e.currentTarget);
        var row = button.parent().parent().parent().parent();
        row.attr("editMode", "false");
        button.parent().hide();
        $("[modeType='editButton']", row).show();
        $("[type='editModeView']", row).hide();
        $("[type='readOnlyModeView']", row).show();
    }

    function editButtonOkClick(e) {
        e.stopImmediatePropagation();
        var button = $(e.currentTarget);
        var row = button.parent().parent().parent().parent();
        var obj = getClaimPositionFromRow(row);
        if (obj.error) {
            showMessage(obj.message);
        } else {
            messageUi.progressShow();
            var model = obj.model;
            model.IdClaim = claim.Id;
            model.Id = Number(row.attr("positionId"));
            $.ajax({
                url: "/Claim/EditClaimPosition",
                type: 'POST',
                dataType: 'json',
                data: JSON.stringify(model),
                processData: false,
                contentType: 'application/json; charset = utf-8 ',
                success: function(data) {
                    messageUi.progressHide();
                    if (data.IsComplete) {
                        row.attr("editMode", "false");
                        $("[type='rowNumberLabel']", row).text(model.RowNumber != 0 ? model.RowNumber : "");
                        $("[type='catalogNumberLabel']", row).text(model.CatalogNumber);
                        $("[type='nameLabel']", row).text(model.Name);
                        $("[type='replaceLabel']", row).text(model.Replace);
                        $("[type='unitLabel']", row).text(getUnitString(model.Unit));
                        $("[type='unitLabel']", row).attr("val", model.Unit);
                        $("[type='valueLabel']", row).text(model.Value);
                        $("[type='productManagerLabel']", row).text(model.ProductManager.Name);
                        $("[type='productManagerLabel']", row).attr("val", model.ProductManager.Id);
                        $("[type='commentLabel']", row).text(model.Comment);
                        var currency = getCurrencyById(model.Currency);
                        $("[type='priceLabel']", row).attr("currency", currency.Id);
                        $("[type='priceLabel']", row).text(model.Price != 0 ? model.Price.toFixed(2) : "");
                        if (model.Price == 0) {
                            $("[type='priceLabelPostfix']", row).hide();
                        } else {
                            $("[type='priceLabelPostfix']", row).show();
                            $("[type='priceLabelPostfix']", row).text(currency.Value + " за ед. макс.");
                        }
                        $("[type='sumLabel']", row).text(model.Sum != 0 ? model.Sum.toFixed(2) : "");
                        if (model.Sum == 0) {
                            $("[type='sumLabelPostfix']", row).hide();
                        } else {
                            $("[type='sumLabelPostfix']", row).show();
                            $("[type='sumLabelPostfix']", row).text(currency.Value + " всего макс.");
                        }
                        $("[type='priceTzrLabel']", row).text(model.PriceTzr != 0 ? model.PriceTzr.toFixed(2) : "");
                        if (model.PriceTzr == 0) {
                            $("[type='priceTzrLabelPostfix']", row).hide();
                        } else {
                            $("[type='priceTzrLabelPostfix']", row).show();
                            $("[type='priceTzrLabelPostfix']", row).text(currency.Value + " за ед.");
                        }
                        $("[type='sumTzrLabel']", row).text(model.SumTzr != 0 ? model.SumTzr.toFixed(2) : "");
                        if (model.SumTzr == 0) {
                            $("[type='sumTzrLabelPostfix']", row).hide();
                        } else {
                            $("[type='sumTzrLabelPostfix']", row).show();
                            $("[type='sumTzrLabelPostfix']", row).text(currency.Value + " всего");
                        }
                        $("[type='priceNdsLabel']", row).text(model.PriceNds != 0 ? model.PriceNds.toFixed(2) : "");
                        if (model.PriceNds == 0) {
                            $("[type='priceNdsLabelPostfix']", row).hide();
                        } else {
                            $("[type='priceNdsLabelPostfix']", row).show();
                            $("[type='priceNdsLabelPostfix']", row).text(currency.Value + " за ед.");
                        }
                        $("[type='sumNdsLabel']", row).text(model.SumNds != 0 ? model.SumNds.toFixed(2) : "");
                        if (model.SumNds == 0) {
                            $("[type='sumNdsLabelPostfix']", row).hide();
                        } else {
                            $("[type='sumNdsLabelPostfix']", row).show();
                            $("[type='sumNdsLabelPostfix']", row).text(currency.Value + " всего");
                        }
                        button.parent().hide();
                        $("[modeType='editButton']", row).show();
                        $("[type='editModeView']", row).hide();
                        $("[type='readOnlyModeView']", row).show();
                    } else {
                        showMessage("Ошибка при изменении позиции спецификации");
                    }
                }
            });
        }
    }

    //Вспомагательные методы для позиций
    function getColorForPositionState(state) {
        var result = "";
        switch (state) {
            case 1:
                result = "#CCCCCC";
                break;
            case 2:
                result = "#f7ecb5";
                break;
            case 3:
                result = "#e4b9b9";
                break;
            case 4:
                result = "#c1e2b3";
                break;
        }
        return result;
    }

    function selectAllPosition(e) {
        var state = e.currentTarget.checked;
        var positionsCb = $("[modetype='selectPositionElement']", $("#positionTable"));
        $.each(positionsCb, function(i, element) {
            element.checked = state;
        });
        var positionsRows = $("[type='positionRow']", $("#positionTable"));
        $.each(positionsRows, function(index, element) {
            element = $(element);
            setRowSelect(element, !state);
        });
    }

    function setInfoForPositionRows() {
        var positionsRows = $("[type='positionRow']", $("#positionTable"));
        var positionsCount = 0;
        var calculateCount = 0;
        $.each(positionsRows, function(index, element) {
            element = $(element);
            positionsCount++;
            var idPosition = element.attr("positionId");
            $("[modetype='claimRowNumber']", element).text(index + 1);
            var calcRowsCount = $("[type='positionCalculate'][calcPositionId='" + idPosition + "']", $("#positionTable")).size();
            if (calcRowsCount > 0) {
                calculateCount++;
            }
        });
        $("#positionCountLabel").text(positionsCount);
        $("#positionCalculateCountLabel").text(calculateCount);
    }

    function rowPositionClick(e) {
        var row = $(e.currentTarget);
        var editMode = row.attr("editMode") == "true";
        if (editMode) return;
        var state = row.attr("selectState") == "true";
        if (!state) {
            var selectedRows = $("[type='positionRow'][selectState='true']", $("#positionTable"));
            $.each(selectedRows, function(index, element) {
                element = $(element);
                setRowSelect(element, true);
            });
        }
        setRowSelect(row, state);
    }

    function setRowSelect(row, currentState) {
        if (currentState) {
            row.attr("selectState", "false");
            var color = row.attr("initalColor");
            row.css("backgroundColor", color);
        } else {
            row.attr("selectState", "true");
            var initalColor = row.css("backgroundColor");
            row.attr("initalColor", initalColor);
            row.css("backgroundColor", "#EFD1A7");
            $("[modetype='selectPositionElement']", row).get(0).checked = true;
        }
    }

    //получение разметки для отображения позиции
    function getPositionElement(position) {
        var element = $("#addPositionRow").clone();
        element.attr("positionId", position.Id);
        element.removeAttr("id");
        element.attr("type", "positionRow");
        element.show();
        var value = "";
        if (position.RowNumber != 0) {
            value = position.RowNumber;
        }
        $("[type='catalogNumberLabel']", element).text(position.CatalogNumber);
        $("[modelType='catalogNumberValue']", element).val(position.CatalogNumber);
        $("[type='nameLabel']", element).text(position.Name);
        $("[modelType='nameValue']", element).val(position.Name);
        $("[type='replaceLabel']", element).text(position.Replace);
        $("[modelType='replaceValue']", element).val(position.Replace);
        $("[type='unitLabel']", element).text(getUnitString(position.Unit));
        $("[type='unitLabel']", element).attr("val", position.Unit);
        $("option[value='" + position.Unit + "']", $("[type='unitsList']", element)).attr("selected", "selected");
        $("[type='valueLabel']", element).text(position.Value);
        $("[modelType='valueValue']", element).val(position.Value);
        $("[type='productManagerLabel']", element).text(position.ProductManager.Name);
        $("[type='productManagerLabel']", element).attr("val", position.ProductManager.Id);
        $("option[value='" + position.ProductManager.Id + "']", $("[type='productManagersList']", element)).attr("selected", "selected");
        $("[type='commentLabel']", element).text(position.Comment);
        $("[modelType='commentValue']", element).val(position.Comment);
        $("option[value='" + position.Currency + "']", $("[type='currenciesList']", element)).attr("selected", "selected");
        var currency = getCurrencyById(position.Currency);
        var price = "";
        if (position.Price != 0) price = position.Price.toFixed(2);
        $("[type='priceLabel']", element).text(price);
        $("[type='priceLabel']", element).attr("currency", currency.Id);
        if (price == "") {
            $("[type='priceLabelPostfix']", element).hide();
        } else {
            $("[type='priceLabelPostfix']", element).show();
            $("[type='priceLabelPostfix']", element).text(currency.Value + " за ед. макс.");
        }
        $("[modelType='priceValue']", element).val(price);
        var sum = "";
        if (position.Sum != 0) sum = position.Sum.toFixed(2);
        $("[type='sumLabel']", element).text(sum);
        if (sum == "") {
            $("[type='sumLabelPostfix']", element).hide();
        } else {
            $("[type='sumLabelPostfix']", element).show();
            $("[type='sumLabelPostfix']", element).text(currency.Value + " всего макс.");
        }
        $("[type='priceTzrLabel']", element).text(position.PriceTzr != 0 ? position.PriceTzr.toFixed(2) : "");
        if (position.PriceTzr == 0) {
            $("[type='priceTzrLabelPostfix']", element).hide();
        } else {
            $("[type='priceTzrLabelPostfix']", element).show();
            $("[type='priceTzrLabelPostfix']", element).text(currency.Value + " за ед.");
        }
        $("[type='sumTzrLabel']", element).text(position.SumTzr != 0 ? position.SumTzr.toFixed(2) : "");
        if (position.SumTzr == 0) {
            $("[type='sumTzrLabelPostfix']", element).hide();
        } else {
            $("[type='sumTzrLabelPostfix']", element).show();
            $("[type='sumTzrLabelPostfix']", element).text(currency.Value + " всего");
        }
        $("[type='priceNdsLabel']", element).text(position.PriceNds != 0 ? position.PriceNds.toFixed(2) : "");
        if (position.PriceNds == 0) {
            $("[type='priceNdsLabelPostfix']", element).hide();
        } else {
            $("[type='priceNdsLabelPostfix']", element).show();
            $("[type='priceNdsLabelPostfix']", element).text(currency.Value + " за ед.");
        }
        $("[type='sumNdsLabel']", element).text(position.SumNds != 0 ? position.SumNds.toFixed(2) : "");
        if (position.SumNds == 0) {
            $("[type='sumNdsLabelPostfix']", element).hide();
        } else {
            $("[type='sumNdsLabelPostfix']", element).show();
            $("[type='sumNdsLabelPostfix']", element).text(currency.Value + " всего");
        }
        $("[modelType='sumValue']", element).val(sum);
        $("[modetype='addPositionButtonOK']", element).hide();
        $("[modetype='addPositionButtonCancel']", element).hide();
        $("[type='editPositionPanel']", element).show();
        $("[modetype='deleteButton']", element).show();
        var editModeButton = $("button[modeType='editButton']", element);
        editModeButton.click(editModeButtonClick);
        var editButtonCancel = $("button[modeType='editPositionButtonCancel']", element);
        editButtonCancel.click(editButtonCancelClick);
        var editButtonOk = $("button[modeType='editPositionButtonOK']", element);
        editButtonOk.click(editButtonOkClick);
        var deleteButton = $("button[modeType='deleteButton']", element);
        deleteButton.click(deleteButtonClick);
        $("[type='editModeView']", element).hide();
        $("[type='readOnlyModeView']", element).show();
        var color = getColorForPositionState(position.State);
        element.css("backgroundColor", color);
        element.css("cursor", "pointer");
        element.attr("selectState", "false");
        element.attr("editMode", "false");
        element.attr("initalColor", color);
        element.click(rowPositionClick);
        return element;
    }

    //получение модели позиции из эл. управления и проверка введенных значений на валидность
    function getClaimPositionFromRow(row) {
        var obj = { error: false, message: "", model: null };
        var message = "";
        var name = $("[modelType='nameValue']", row).val();
        if (name.trim() == "") {
            obj.error = true;
            obj.message = "Заполните обязательное поле Наименование";
        }
        var value = $("[modelType='valueValue']", row).val();
        value = value.replace(",", ".");
        if (value.trim() == "") {
            message = "Заполните обязательное поле Количество";
            if (obj.message.trim() != "") {
                message = "\r" + message;
            }
            obj.error = true;
            obj.message += message;
        } else {
            if (isNaN(Number(value.trim())))  {
                message = "Значение '" + value.trim() + "' в поле Количество не является целым числом";
                if (obj.message.trim() != "") {
                    message = "\r" + message;
                }
                obj.error = true;
                obj.message += message;
            } else {
                if (value.trim().indexOf(".") != -1) {
                    message = "Значение '" + value.trim() + "' в поле Количество не является целым числом";
                    if (obj.message.trim() != "") {
                        message = "\r" + message;
                    }
                    obj.error = true;
                    obj.message += message;
                }
            }
        }
        var price = $("[modelType='priceValue']", row).val();
        price = price.replace(",", ".");
        if (price.trim() != "") {
            if (isNaN(Number(price.trim())))  {
                message = "Значение '" + price.trim() + "' в поле Цена за единицу максимум не является числом";
                if (obj.message.trim() != "") {
                    message = "\r" + message;
                }
                obj.error = true;
                obj.message += message;
            }
        }
        var sum = $("[modelType='sumValue']", row).val();
        sum = sum.replace(",", ".");
        if (sum.trim() != "") {
            if (isNaN(Number(sum.trim())))  {
                message = "Значение '" + sum.trim() + "' в поле Сумма максимум за единицу максимум не является числом";
                if (obj.message.trim() != "") {
                    message = "\r" + message;
                }
                obj.error = true;
                obj.message += message;
            }
        }
        var priceTzr = $("[modelType='priceTzrValue']", row).val();
        priceTzr = priceTzr.replace(",", ".");
        if (priceTzr.trim() != "") {
            if (isNaN(Number(priceTzr.trim())))  {
                message = "Значение '" + priceTzr.trim() + "' в поле Цена с ТЗР не является числом";
                if (obj.message.trim() != "") {
                    message = "\r" + message;
                }
                obj.error = true;
                obj.message += message;
            }
        }
        var sumTzr = $("[modelType='sumTzrValue']", row).val();
        sumTzr = sumTzr.replace(",", ".");
        if (sumTzr.trim() != "") {
            if (isNaN(Number(sumTzr.trim())))  {
                message = "Значение '" + sumTzr.trim() + "' в поле Сумма с ТЗР максимум не является числом";
                if (obj.message.trim() != "") {
                    message = "\r" + message;
                }
                obj.error = true;
                obj.message += message;
            }
        }
        var priceNds = $("[modelType='priceNdsValue']", row).val();
        priceNds = priceNds.replace(",", ".");
        if (priceNds.trim() != "") {
            if (isNaN(Number(priceNds.trim())))  {
                message = "Значение '" + priceNds.trim() + "' в поле Цена с НДС максимум не является числом";
                if (obj.message.trim() != "") {
                    message = "\r" + message;
                }
                obj.error = true;
                obj.message += message;
            }
        }
        var sumNds = $("[modelType='sumNdsValue']", row).val();
        sumNds = sumNds.replace(",", ".");
        if (sumNds.trim() != "") {
            if (isNaN(Number(sumNds.trim())))  {
                message = "Значение '" + sumNds.trim() + "' в поле Сумма с НДС за единицу максимум не является числом";
                if (obj.message.trim() != "") {
                    message = "\r" + message;
                }
                obj.error = true;
                obj.message += message;
            }
        }
        var productManagerId = $(":selected", $("[type='productManagersList']", row)).val().trim();
        if (productManagerId == "null") {
            message = "Выберите снабженца";
            if (obj.message.trim() != "") {
                message = "\r" + message;
            }
            obj.error = true;
            obj.message += message;
        }
        if (!obj.error) {
            value = Number(value.trim());
            if (price.trim() != "") price = Number(price.trim());
            else price = 0;
            if (sum.trim() != "") sum = Number(sum.trim());
            else sum = 0;
            if (priceTzr.trim() != "") priceTzr = Number(priceTzr.trim());
            else priceTzr = 0;
            if (sumTzr.trim() != "") sumTzr = Number(sumTzr.trim());
            else sumTzr = 0;
            if (priceNds.trim() != "") priceNds = Number(priceNds.trim());
            else priceNds = 0;
            if (sumNds.trim() != "") sumNds = Number(sumNds.trim());
            else sumNds = 0;
            var catalogNumber = $("[modelType='catalogNumberValue']", row).val().trim();
            var replace = $("[modelType='replaceValue']", row).val().trim();
            var unit = Number($(":selected", $("[type='unitsList']", row)).val());
            var productManager = getProductManagerById($(":selected", $("[type='productManagersList']", row)).val().trim());
            var comment = $("[modelType='commentValue']", row).val().trim();
            var currency = Number($(":selected", $("[type='currenciesList']", row)).val());
            var model = {
                CatalogNumber: catalogNumber,
                Name: name,
                Replace: replace,
                Unit: unit,
                Value: value,
                ProductManager: productManager,
                Comment: comment,
                Price: price,
                Sum: sum,
                PriceTzr: priceTzr,
                SumTzr: sumTzr,
                PriceNds: priceNds,
                SumNds: sumNds,
                Currency: currency
            };
            obj.model = model;
        }
        return obj;
    }

    //<<<<<<Объект Расчет позиций>>>>>
    function getCalculateTableForPosition(position) {
        var element = $("<tr></tr>");
        var cell = $("<td colspan='5'></td>");
        element.append(cell);
        var table = $("<table style='width: 100%;'></table>");
        table.attr("positionId", position.Id);
        table.attr("type", "calculatePositionTable");
        cell.append(table);
        return element;
    }  

    function getElementForCalculate(model) {
        var calcTable = $("#calculatePositionTable").clone();
        calcTable.removeAttr("id");
        var row = calcTable.find("tr");
        row.attr("type", "positionCalculate");
        row.attr("calcId", model.Id);
        row.show();
        $("[modetype='calculateCatalogNumberValueLabel']", row).text(model.CatalogNumber);
        $("[modetype='calculateNameValueLabel']", row).text(model.Name);
        $("[modetype='calculateReplaceValueLabel']", row).text(model.Replace);
        var currency = getCurrencyById(model.Currency);
        $("[modetype='calculatePriceCurrencyValueLabel']", row).text(model.PriceCurrency != 0 ? model.PriceCurrency : "");
        if (model.PriceCurrency == 0) {
            $("[modetype='calculatePriceCurrencyValueLabelPostix']", row).hide();
        } else {
            $("[modetype='calculatePriceCurrencyValueLabelPostix']", row).show();
            $("[modetype='calculatePriceCurrencyValueLabelPostix']", row).text(currency.Value + " за ед.");
        }
        $("[modetype='calculateSumCurrencyValueLabel']", row).text(model.SumCurrency ? model.SumCurrency : "");
        if (model.SumCurrency == 0) {
            $("[modetype='calculateSumCurrencyValueLabelPostix']", row).hide();
        } else {
            $("[modetype='calculateSumCurrencyValueLabelPostix']", row).show();
            $("[modetype='calculateSumCurrencyValueLabelPostix']", row).text(currency.Value + " всего");
        }
        $("[modetype='calculatePriceRubValueLabel']", row).text(model.PriceRub ? model.PriceRub : "");
        if (model.PriceRub == 0) {
            $("[modetype='calculatePriceRubValueLabelPostix']", row).hide();
        } else {
            $("[modetype='calculatePriceRubValueLabelPostix']", row).show();
        }
        $("[modetype='calculateSumRubValueLabel']", row).text(model.SumRub);
        $("[modetype='calculateProviderValueLabel']", row).text(model.Provider);
        $("[modetype='calculateProtectConditionValueLabel']", row).text(model.ProtectCondition);
        $("[modetype='calculateCommentValueLabel']", row).text(model.Comment);
        $("[modetype='calculateProtectFactValueLabel']", row).text(getProtectFactById(model.ProtectFact.Id).Value);
        return row;
    }

    //<<<<<<История статусов заявки>>>>>>
    function initStatusHistory() {
        if (histories == null) return;
        var historyLength = histories.length;
        for (var i = 0; i < historyLength; i++) {
            var statusHistory = histories[i];
            addClaimStatusHistoryElement(statusHistory);
        }
    }

    function addClaimStatusHistoryElement(model) {
        var container = $("#claimStatusHistoryContainer");
        var element = $("<li class='list-group-item'></li>");
        var status = getClaimStatusById(model.Status.Id);
        if (status == null) {
            status = { Value: "Неопределен" };
        }
        if (model.Comment == null) model.Comment = "";
        element.append("<h5 class='list-group-item-heading'>" + model.DateString + "<br />" + "<strong>" + status.Value + "</strong>" + "</h5>");
        element.append("<p class='list-group-item-text'>" + model.Comment + "</p>");
        container.append(element);
    }  

    //<<<<<<Получение excel файлов с сервера>>>>>>
    function getExcelFileFromServer() {
        $("body").append("<iframe src='/Claim/GetSpecificationFile?claimId="+ claim.Id + "' width='0' height='0' style='display: none;' align='left'></iframe>");
    }

    function getCalculateExcelFileFromServer() {
        $("body").append("<iframe src='/Calc/GetSpecificationFile?claimId="+ claim.Id + "&forManager=true' width='0' height='0' style='display: none;' align='left'></iframe>");
    }

    function getCalculateOnlyCalculateExcelFileFromServer() {
        $("body").append("<iframe src='/Claim/GetSpecificationFileOnlyCalculation?claimId="+ claim.Id + "' width='0' height='0' style='display: none;' align='left'></iframe>");
    }

    //методы взаимодейсвия с фреймами загрузки/выгрузки файлов
    function openFile() {
        var obj = {
            type: "mainWindow",
            error: false,
            message: "openFile"
        }
        var message = JSON.stringify(obj);
        sendMessage(message);
    }

    function sendMessage(message) {
        var target = getTargetOrigin();
        document.getElementById("uploadFile").contentWindow.postMessage(message, target);
    }

    function getTargetOrigin() {
        var url = document.location.href;
        url = url.replace("http://", "");
        var index = url.indexOf("/");
        url = url.substr(0, index);
        url = "http://" + url;
        return url;
    }

    function messageHandler(e) {
        var data = e.data;
        var obj = $.parseJSON(data);
        if (obj.type.trim() == "UploadFrameLoaded") {
            if (initClaimIdNedded) {
                var objM = {
                    type: "setClaimId",
                    error: false,
                    message: claim.Id
                }
                var message = JSON.stringify(objM);
                sendMessage(message);
            }
        }
        if (obj.type.trim() == "DownloadExcel") {
            if (obj.error == true) {
                if (obj.message != "") {
                    showMessage(obj.message);
                } else {
                    showMessage("Ошибка при скачивании файла!");   
                }
            }
        }
        if (obj.type.trim() == "DownloadExcelOnlyCalculate") {
            if (obj.error == true) {
                if (obj.message != "") {
                    showMessage(obj.message);
                } else {
                    showMessage("Ошибка при скачивании файла!");   
                }
            }
        }
        if (obj.type.trim() == "UploadExcel") {
            if (obj.error == true) {
                showMessage(obj.message);
            }
        }
        if (obj.type.trim() == "UploadExcelStarted") {
            messageUi.progressShow();
        }
        if (obj.type.trim() == "UploadExcelResult") {
            messageUi.progressHide();
            showMessage(obj.message);
            if (!obj.error) {
                var positions = obj.positions;
                var container = $("#positionTable");
                if (positions != null) {
                    var positionsLength = positions.length;
                    for (var i = 0; i < positionsLength; i++) {
                        var position = positions[i];
                        var element = getPositionElement(position);
                        container.append(element);
                    }
                }
                setInfoForPositionRows();
            }
        }
    }
    
    //вспомагательные методы
    function showMessage(message) {
        alert(message);
    }

    //работа со списками
    function initManagersList() {
        if (managers == null || managers.length == 0) return;
        var list = $("#listManagers");
        var option = $("<option value='null'>--выберите запись--</option>");
        list.append(option);
        var managersLength = managers.length;
        for (var i = 0; i < managersLength; i++) {
            var manager = managers[i];
            option = $("<option value='" + manager.Id + "'>" + manager.Name + "</option>");
            list.append(option);
        }
        list.change(function() {
            var selElement = $(":selected", list);
            if (selElement != null) {
                var id = selElement.val();
                if (id == "null") return;
                var selManager = getManagerById(id);
                if (selManager != null) {
                    $("#managerSubDivision").text(selManager.SubDivision);
                }
            }
        });
        list.change();
    }

    function initDealTypesList() {
        if (dealTypes == null || dealTypes.length == 0) return;
        var list = $("#listDealTypes");
        var option = $("<option value='null'>--выберите запись--</option>");
        list.append(option);
        var dealTypesLength = dealTypes.length;
        for (var i = 0; i < dealTypesLength; i++) {
            var dealType = dealTypes[i];
            option = $("<option value='" + dealType.Id + "'>" + dealType.Value + "</option>");
            list.append(option);
        }
    }

    function getUnitString(unit) {
        var result = "";
        switch (unit) {
            case 1:
                result = "Шт";
                break;
            case 2:
                result = "Упак";
                break;
        }
        return result;
    }

    function getManagerById(id) {
        var manager = null;
        var managersLength = managers.length;
        for (var i = 0; i < managersLength; i++) {
            var model = managers[i];
            if (model.Id.trim().toLowerCase() == id.trim().toLowerCase()) {
                manager = model;
                break;
            }
        }
        return manager;
    }

    function getProductManagerById(id) {
        var manager = null;
        var managersLength = productManagers.length;
        for (var i = 0; i < managersLength; i++) {
            var model = productManagers[i];
            if (model.Id.trim().toLowerCase() == id.trim().toLowerCase()) {
                manager = model;
                break;
            }
        }
        return manager;
    }

    function getDealTypeById(id) {
        id = Number(id);
        var dealType = null;
        var dealTypesLength = dealTypes.length;
        for (var i = 0; i < dealTypesLength; i++) {
            var model = dealTypes[i];
            if (model.Id == id) {
                dealType = model;
                break;
            }
        }
        return dealType;
    }

    function getCurrencyById(id) {
        id = Number(id);
        var currency = null;
        var currenciesLength = currencies.length;
        for (var i = 0; i < currenciesLength; i++) {
            var model = currencies[i];
            if (model.Id == id) {
                currency = model;
                break;
            }
        }
        return currency;
    }

    function getProtectFactById(id) {
        id = Number(id);
        var protectFact = null;
        var protectFactLength = facts.length;
        for (var i = 0; i < protectFactLength; i++) {
            var model = facts[i];
            if (model.Id == id) {
                protectFact = model;
                break;
            }
        }
        return protectFact;
    }

    function getClaimStatusById(id) {
        id = Number(id);
        var status = null;
        var statusLength = claimStatus.length;
        for (var i = 0; i < statusLength; i++) {
            var model = claimStatus[i];
            if (model.Id == id) {
                status = model;
                break;
            }
        }
        return status;
    }

    function getProductManagersList(productManagerId) {
        var list = $("<select size='1' type='productManagersList'  class='form-control input-sm'></select>");
        var option = $("<option value='null'>--Снабженец/Продакт *--</option>");
        list.append(option);
        var productManagersLength = productManagers.length;
        for (var i = 0; i < productManagersLength; i++) {
            var model = productManagers[i];
            option = $("<option value='" + model.Id + "'>" + model.Name + "</option>");
            if (productManagerId != null && model.Id == productManagerId) {
                option.attr("selected", "selected");
            }
            list.append(option);
        }
        return list;
    }

    function getUnitsList(unit) {
        var units = [{ Id: 1, Value: "Шт" }, { Id: 2, Value: "Упак" }];
        var list = $("<select size='1' type='unitsList' class='form-control input-sm'></select>");
        var unitsLength = units.length;
        for (var i = 0; i < unitsLength; i++) {
            var model = units[i];
            var option = $("<option value='" + model.Id + "'>" + model.Value + "</option>");
            if (unit != null && model.Id == unit) {
                option.attr("selected", "selected");
            }
            list.append(option);
        }
        return list;
    }

    function getCurrenciesList(currency) {
        var units = currencies;
        var list = $("<select size='1' type='currenciesList' class='form-control input-sm'></select>");
        var unitsLength = units.length;
        for (var i = 0; i < unitsLength; i++) {
            var model = units[i];
            var option = $("<option value='" + model.Id + "'>" + model.Value + "</option>");
            if (currency != null && model.Id == unit) {
                option.attr("selected", "selected");
            }
            list.append(option);
        }
        return list;
    }

    function selectListElement(list, selectedValue) {
        var options = $("option", list);
        $.each(options, function(index, elem) {
            $(elem).removeAttr("selected");
            if ($(elem).val().trim() == selectedValue.trim()) {
                $(elem).attr("selected", "selected");
            }
        });
    }
</script>
<div>
    <div class="panel panel-default">
        <div class="panel-heading">
            <h4 id="claimId">
                Новая заявка
            </h4>
        </div>
        <div class="panel-body">
            <div class="form-horizontal val-form col-sm-9 small" role="form">
                <div class="form-group">
                    <label class="col-sm-3 control-label">№ конкурса</label>
                    <div class="col-sm-9">
                        <input type="text" id="tenderNumber" class="form-control" />
                        <span id="tenderNumberLabel" style="display: none;" class="form-control"></span>
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-3 control-label required-mark">Дата начала</label>
                    <div class="col-sm-9">
                        <input type="text" id="tenderStart" style="cursor: pointer;" class="form-control datepicker-btn" />
                        <span id="tenderStartLabel" style="display: none;" class="form-control"></span>
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-3 control-label required-mark">Срок сдачи</label>
                    <div class="col-sm-9">
                        <input type="text" id="claimDeadline" style="cursor: pointer;" class="form-control datepicker-btn" />
                        <span id="claimDeadlineLabel" style="display: none;" class="form-control"></span>
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-3 control-label required-mark">Срок подачи КП</label>
                    <div class="col-sm-9">
                        <input type="text" id="kPDeadline" style="cursor: pointer;" class="form-control datepicker-btn" />
                        <span id="kPDeadlineLabel" style="display: none;" class="form-control"></span>
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-3 control-label required-mark">Заказчик</label>
                    <div class="col-sm-9">
                        <input type="text" id="customer" class="form-control" />
                        <span id="customerLabel" style="display: none;" class="form-control"></span>
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-3 control-label required-mark">ИНН заказчика</label>
                    <div class="col-sm-9">
                        <input type="text" id="innCustomer" class="form-control" />
                        <span id="innCustomerLabel" style="display: none;" class="form-control"></span>
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-3 control-label">Сумма с НДС</label>
                    <div class="col-sm-9">
                        <input type="text" id="sum" class="form-control" />
                        <span id="sumLabel" style="display: none;" class="form-control"></span>
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-3 control-label required-mark">Тип сделки</label>
                    <div class="col-sm-9">
                        <select size="1" id="listDealTypes" class="form-control"></select>
                        <span id="listDealTypesLabel" style="display: none;" class="form-control"></span>
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-3 control-label">Ссылка на закупки</label>
                    <div class="col-sm-9">
                        <input type="text" id="tenderUrl" class="form-control" />
                        <span id="tenderUrlLabel" style="display: none;" class="form-control"></span>
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-3 control-label required-mark">Менеджер</label>
                    <div class="col-sm-9">
                        <select size="1" id="listManagers" class="form-control"></select>
                        <span id="listManagersLabel" style="display: none;" class="form-control"></span>
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-3 control-label">Подразделение</label>
                    <div class="col-sm-9">
                        <span id="managerSubDivision" class="form-control"></span>
                        <span id="managerSubDivisionLabel" style="display: none;" class="form-control"></span>
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-3 control-label">Срок поставки</label>
                    <div class="col-sm-9">
                        <input type="text" id="deliveryDate" style="cursor: pointer;" class="form-control datepicker-btn" />
                        <span id="deliveryDateLabel" style="display: none;" class="form-control"></span>
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-3 control-label">Место поставки</label>
                    <div class="col-sm-9">
                        <input type="text" id="deliveryPlace" class="form-control" />
                        <span id="deliveryPlaceLabel" style="display: none;" class="form-control"></span>
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-3 control-label">Дата аукциона</label>
                    <div class="col-sm-9">
                        <input type="text" id="auctionDate" style="cursor: pointer;" class="form-control datepicker-btn" />
                        <span id="auctionDateLabel" style="display: none;" class="form-control"></span>
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-3 control-label">Курсы валют</label>
                    <div class="col-sm-9">
                        <span>USD: </span><input type="text" id="currencyUsd" class="form-control" />
                        <br/>
                        <span>EUR: </span><input type="text" id="currencyEur" class="form-control" />
                        <br />
                        <button type="button" id="butChangeCurrency" style="display: none;" class="btn btn-default">Изменить курс</button>
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-3 control-label">Комментарий</label>
                    <div class="col-sm-9">
                        <textarea rows="7" id="comment" class="form-control"></textarea>
                        <div id="commentLabel" style="display: none;" class="form-control"></div>
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-offset-3 col-sm-9">
                        <button type="button" id="butSaveClaim" class="btn btn-primary"><i class="fa fa-save"></i> сохранить</button>

                        <button type="button" id="butSetClaimOnWork" style="display: none;" class="btn btn-success"><i class="fa fa-mail-forward"></i> в работу</button>
                        <div id="claimStatusPanel" style="display: none;">
                            <button id="butСlaimStatusContined" type="button" class="btn btn-success"><i class="fa fa-play"></i> возобновить</button>
                            <button id="butСlaimStatusStopped" type="button" class="btn btn-warning"><i class="fa fa-pause"></i> приостановить</button>
                            <button id="butСlaimStatusCanceled" type="button" class="btn btn-danger"><i class="fa fa-stop"></i> отменить</button>
                            
                            <textarea rows="7" id="claimStatusComment" class="form-control" placeholder="Комментарий"></textarea>

                        </div>
                        
                    </div>
                </div>
            </div>
            <div class="col-sm-3">
                <h4>История изменения статуса</h4>
                <div>
                    <ul class="list-group small" id="claimStatusHistoryContainer"></ul>
                </div>
            </div>
        </div>
    </div>
    <div id="positionPanel" style="display: none; margin-left: 4px; margin-right: 4px;">
        <h5>
            Список позиций
            <span class="label label-default">всего&nbsp;<span class="big" id="positionCountLabel">0</span></span>
            <span class="label label-info">из них рассчитано&nbsp;<span class="big" id="positionCalculateCountLabel">0</span></span>
        </h5>
        <table class="table small">
            <thead>
            <tr>
                <th class="min-width"><input type="checkbox" id="cbSelectAllPosition" data-toggle="tooltip" title="выделить все"/></th>
                <th>№</th>
                <th></th>
                <th>
                    <div class="row">
                        <div class="col-sm-10">
                            <button type="button" id="butAddPosition" class="btn btn-primary btn-sm"><i class="fa fa-plus-circle"></i> добавить позицию</button>
                            <span id="excelPanel">
                                    <button id="butGetFile" type="button" class="btn btn-default btn-sm"><i class="fa fa-download"></i> скачать спецификацию</button>
                                    <button id="butUploadFile" type="button" class="btn btn-default btn-sm"><i class="fa fa-upload"></i> загрузить спецификацию</button>
                                    <iframe id="uploadFile" src="/Claim/UploadFileForm" style="display: none;"></iframe>
                                </span>
                            <button id="butSetPositionReject" type="button" class="btn btn-danger btn-sm"><i class="fa fa-close"></i> отклонить отмеченные</button>
                            <button id="butSetPositionConfirm" type="button" class="btn btn-success btn-sm"><i class="fa fa-check"></i> принять все</button>
                            <span id="excelCalculatePanel" style="display: none;">
                                <button id="butGetCalculateFile" type="button" class="btn btn-default btn-sm"><i class="fa fa-download"></i> скачать расчет</button>
                                <button id="butGetCalculateOnlyCalculateFile" type="button" class="btn btn-default btn-sm"><i class="fa fa-download"></i> скачать расчет(без позиций)</button>
                            </span>
                        </div>
                        <div class="col-sm-2">Продакт/Снабженец *</div>
                    </div>
                </th>
                <th>

                </th>
            </tr>
            </thead>
            <tbody id="positionTable">
            <tr id="addPositionRow" style="display: none;">
                <td class="min-width center">
                    <input type="checkbox" modetype="selectPositionElement"/>
                </td>
                <td class="min-width center"><strong modetype="claimRowNumber"></strong></td>
                <td class="min-width">
                    <button type='button' modetype='addPositionButtonOK' class='btn btn-primary btn-lg' data-toggle='tooltip' title='сохранить'><i class='fa fa-save'></i></button><br />
                    <button type='button' modetype='addPositionButtonCancel' class='btn btn-default btn-lg' data-toggle='tooltip' title='отмена'><i class='fa fa-undo'></i></button>
                    <span type="editPositionPanel" style="display: none;">

                        <button type='button' modetype='editButton' class='btn btn-link btn-lg' data-toggle='tooltip' title='изменить'><i class='fa fa-edit'></i></button>
                        <span type="editPositionActionPanel" style="display: none;">
                            <button type='button' modetype='editPositionButtonOK' class='btn btn-primary btn-lg' data-toggle='tooltip' title='изменить'><i class='fa fa-save'></i></button><br />
                            <button type='button' modetype='editPositionButtonCancel' class='btn btn-default btn-lg' data-toggle='tooltip' title='отмена'><i class='fa fa-undo'></i></button>
                        </span>
                    </span>
                </td>
                <td>
                        <div type="editModeView" class="col-sm-3">
                            <input type='text' modeltype='catalogNumberValue' class="form-control input-sm" placeholder="Каталожный номер" />
                            <input type='text' modeltype='valueValue' class="form-control input-sm" placeholder="Количество *" />
                            <div id="unitCell"></div>
                            <div id="currencyCell"></div>
                            <input type='text' modeltype='priceValue' class="form-control input-sm" placeholder="Цена за ед., макс." />
                            <input type='text' modeltype='sumValue' class="form-control input-sm" placeholder="Сумма, макс." />
                            <input type='text' modeltype='priceTzrValue' class="form-control input-sm" placeholder="Цена с ТЗР" />
                            <input type='text' modeltype='sumTzrValue' class="form-control input-sm" placeholder="Сумма с ТЗР" />
                            <input type='text' modeltype='priceNdsValue' class="form-control input-sm" placeholder="Цена с НДС" />
                            <input type='text' modeltype='sumNdsValue' class="form-control input-sm" placeholder="Сумма с НДС" />
                        </div>
                        <div type="readOnlyModeView" style="display: none;" class="col-sm-3">
                            <div>
                                <strong type='catalogNumberLabel'></strong>
                            </div>
                            <div>
                                <strong type='valueLabel'></strong>&nbsp;<span type='unitLabel'></span>
                            </div>
                            <div>
                                <strong type='priceLabel'></strong>&nbsp;<span type='priceLabelPostfix'></span>
                            </div>
                            <div>
                                <strong type='sumLabel'></strong>&nbsp;<span type='sumLabelPostfix'></span>
                            </div>
                            <div>
                                <span>Цена с ТЗР:&nbsp;</span><strong type='priceTzrLabel'></strong>&nbsp;<span type='priceTzrLabelPostfix'></span>
                            </div>
                            <div>
                                <span>Сумма с ТЗР:&nbsp;</span><strong type='sumTzrLabel'></strong>&nbsp;<span type='sumTzrLabelPostfix'></span>
                            </div>
                            <div>
                                <span>Цена с НДС:&nbsp;</span><strong type='priceNdsLabel'></strong>&nbsp;<span type='priceNdsLabelPostfix'></span>
                            </div>
                            <div>
                                <span>Сумма с НДС:&nbsp;</span><strong type='sumNdsLabel'></strong>&nbsp;<span type='sumNdsLabelPostfix'></span>
                            </div>
                        </div>
                        <div type="editModeView" class="col-sm-5">
                            <textarea rows="3" class="form-control input-sm" modeltype='nameValue' placeholder="Наименование *"></textarea>
                            <textarea rows="3" class="form-control input-sm" modeltype='replaceValue' placeholder="Замена"></textarea>
                        </div>
                        <div type="readOnlyModeView" style="display: none;" class="col-sm-4">
                            <div>
                                <strong>Наименование</strong>
                                <div type='nameLabel'></div>
                            </div>
                            <div>
                                <strong>Замена</strong>
                                <div type='replaceLabel'></div>
                            </div>
                        </div>
                        <div type="editModeView" class="col-sm-4">
                            <div id="managersCell"></div>
                            <textarea rows='4' modeltype='commentValue' class="form-control input-sm" placeholder="Комментарий"></textarea>
                        </div>
                        <div type="readOnlyModeView" style="display: none;" class="col-sm-3">
                            <div class="form-group">
                                <label>Комментарий</label>
                                <div type="commentLabel"></div>
                            </div>
                        </div>
                        <div type="readOnlyModeView" style="display: none;" class="col-sm-2">
                            <div>
                                <span type='productManagerLabel'></span>
                            </div>
                        </div>
                    </td>
                <td class="min-width">
                    <button type='button' modetype='addPositionButtonOK' class='btn btn-primary btn-lg' data-toggle='tooltip' title='сохранить'><i class='fa fa-save'></i></button><br />
                    <button type='button' modetype='addPositionButtonCancel' class='btn btn-default btn-lg' data-toggle='tooltip' title='отмена'><i class='fa fa-undo'></i></button>
                    <button type='button' modetype='deleteButton' class='btn btn-link btn-lg' data-toggle='tooltip' title='удалить' style="display: none;"><i class='fa fa-trash'></i></button>
                </td>
                </tr>
            </tbody>
        </table>
    </div>
    <table id="calculatePositionTable" class="table table-striped" style="display: none;">
        <tr>
            <td>
                <div class="col-sm-2">
                    <div>
                        <strong modetype="calculateCatalogNumberValueLabel"></strong>
                    </div>
                    <div>
                        <strong modetype="calculatePriceCurrencyValueLabel"></strong>&nbsp;<span modetype="calculatePriceCurrencyValueLabelPostix"></span>
                    </div>
                    <div>
                        <strong modetype="calculateSumCurrencyValueLabel"></strong>&nbsp;<span modetype="calculateSumCurrencyValueLabelPostix"></span>
                    </div>
                    <div>
                        <strong modetype="calculatePriceRubValueLabel"></strong>&nbsp;<span modetype="calculatePriceRubValueLabelPostix">руб. за ед.</span>
                    </div>
                    <div>
                        <strong modetype="calculateSumRubValueLabel"></strong>&nbsp;руб. всего
                    </div>
                </div>
                <div class="col-sm-4">
                    <div>
                        <strong>Наименование</strong>
                        <div modetype="calculateNameValueLabel"></div>
                    </div>
                    <div>
                        <strong>Замена</strong>
                        <div modetype="calculateReplaceValueLabel"></div>
                    </div>
                    <div>
                        <strong>Поставщик</strong>
                        <div modetype="calculateProviderValueLabel"></div>
                    </div>
                </div>
                <div class="col-sm-3">
                    <div class="form-group">
                        <label>Факт получения защиты</label><br/>
                        <span modetype="calculateProtectFactValueLabel"></span><br/>
                        <span modetype="calculateProtectConditionValueLabel"></span>
                    </div>

                </div>
                <div class="col-sm-3">
                    <div class="form-group">
                        <label>Комментарий</label>
                        <div modetype="calculateCommentValueLabel"></div>
                    </div>
                </div>
            </td>
        </tr>
    </table>
    <div id="rejectPositionCommentBox" class="modal fade">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                    <h4 class="modal-title">Комментарий к отклонению</h4>
                </div>
                <div class="modal-body">
                    <textarea id="rejectPositionComment" class="form-control" rows="7" placeholder="Комментарий"></textarea>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-default" data-dismiss="modal">Отмена</button>
                    <button id="butRejectPositionOk" type="button" class="btn btn-primary">Продолжить</button>
                </div>
            </div>
        </div>
    </div>
</div>
