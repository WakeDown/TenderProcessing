@using System.Web.Script.Serialization
@using System.Web.UI.WebControls
@using TenderProcessingDataAccessLayer.Models
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_MasterPage.cshtml";
    var serializer = new JavaScriptSerializer();
    var managers = (List<Manager>)ViewBag.Managers;
    var dealTypes = (List<DealType>)ViewBag.DealTypes;
    var claimStatus = (List<ClaimStatus>)ViewBag.ClaimStatus;
    var productManagers = (List<ProductManager>)ViewBag.ProductManagers;
    var claim = (TenderClaim)ViewBag.Claim;
}
<script type="text/javascript">
    var managers = @Html.Raw(serializer.Serialize(managers));
    var dealTypes = @Html.Raw(serializer.Serialize(dealTypes));
    var claimStatus = @Html.Raw(serializer.Serialize(claimStatus));
    var productManagers = @Html.Raw(serializer.Serialize(productManagers));
    var dateStart = "@ViewBag.DateStart.ToString()";
    var claim = @Html.Raw(serializer.Serialize(claim));
    var initClaimIdNedded = false;

    $(init);

    function init() {
        messageUi.initProgressImage();
        window.addEventListener("message", messageHandler, true);
        if (claim != null && claim.ClaimStatus == 1) {
            $("#excelPanel").show();
        } else {
            $("#excelPanel").hide();
        }
        initManagersList();
        initDealTypesList();
        $("#tenderStart").datepicker({
            dateFormat: "dd.mm.yy"
        });
        $("#kPDeadline").datepicker({
            dateFormat: "dd.mm.yy"
        });
        $("#claimDeadline").datepicker({
            dateFormat: "dd.mm.yy"
        });
        $("#tenderStart").val(dateStart);
        $("#butGetFile").click(getExcelFileFromServer);
        $("#butUploadFile").click(openFile);
        $("#butSaveClaim").click(saveClaim);
        $("#butSetClaimOnWork").click(setClaimOnWork);
        var unitList = getUnitsList(null);
        unitList.css("width", 70);
        $("#unitCell").append(unitList);
        var managersList = getProductManagersList(null);
        managersList.css("width", 160);
        $("#managersCell").append(managersList);
        $("#butAddPosition").click(addPositionButtonClick);
        if (claim != null) {
            if (claim.Positions != null) {
                var container = $("#positionTable");
                var positionsLength = claim.Positions.length;
                for (var i = 0; i < positionsLength; i++) {
                    var position = claim.Positions[i];
                    var element = getPositionElement(position);
                    container.append(element);
                }
            }
            showClaimReadOnly(claim);
            $("#butSaveClaim").hide();
            $("#butSetClaimOnWork").show();
            $("#excelPanel").show(250);
            $("#positionPanel").show(250);
            initClaimIdNedded = true;
            if (claim.ClaimStatus > 1) {
                var status = getClaimStatusById(claim.ClaimStatus);
                if (status == null) {
                    status = { Value: "Неопределен" };
                }
                $("#claimStatus").text(status.Value);
                $("#butSetClaimOnWork").hide();
                $("#addPositionRow").remove();
                var cancelEditButtons = $("[modeType='editButtonCancel']", $("#positionTable"));
                $.each(cancelEditButtons, function(index, elem) {
                    $(elem).click();
                });
                var editButtons = $("[modeType='editButton']", $("#positionTable"));
                $.each(editButtons, function(index, elem) {
                    $(elem).remove();
                });
                var editPanels = $("[type='editActionPanel']", $("#positionTable"));
                $.each(editPanels, function(index, elem) {
                    $(elem).remove();
                });
                var deleteButtons = $("[modeType='deleteButton']", $("#positionTable"));
                $.each(deleteButtons, function(index, elem) {
                    $(elem).remove();
                });
                $("#excelPanel").hide();
            }
        }
    }

    function showMessage(message) {
        $("#errorPanel").html(message);
    }

    function setClaimOnWork(e) {
        $.ajax({
            url: "/Claim/SetClaimOnWork?id=" + claim.Id,
            type: 'GET',
            contentType: 'application/json; charset = utf-8 ',
            success: function(data) {
                if (data.IsComplete) {
                    claim.ClaimStatus = 2;
                    var status = getClaimStatusById(claim.ClaimStatus);
                    if (status == null) {
                        status = { Value: "Неопределен" };
                    }
                    $("#claimStatus").text(status.Value);
                    $("#butSetClaimOnWork").hide();
                    $("#addPositionRow").remove();
                    var cancelEditButtons = $("[modeType='editButtonCancel']", $("#positionTable"));
                    $.each(cancelEditButtons, function(index, elem) {
                        $(elem).click();
                    });
                    var editButtons = $("[modeType='editButton']", $("#positionTable"));
                    $.each(editButtons, function(index, elem) {
                        $(elem).remove();
                    });
                    var editPanels = $("[type='editActionPanel']", $("#positionTable"));
                    $.each(editPanels, function(index, elem) {
                        $(elem).remove();
                    });
                    var deleteButtons = $("[modeType='deleteButton']", $("#positionTable"));
                    $.each(deleteButtons, function(index, elem) {
                        $(elem).remove();
                    });
                    $("#excelPanel").hide();
                } else {
                    if (data.Message == null || data.Message.trim() == "") {
                        showMessage("Ошибка при передачи заявки в работу");
                    } else {
                        showMessage(data.Message);
                    }
                }
            }
        });
    }

    function saveClaim() {
        showMessage("");
        var validModel = isValidClaim();
        if (!validModel.isValid) {
            showMessage(validModel.message);
            return;
        }
        var tenderNumber = $("#tenderNumber").val();
        var tenderStart = $("#tenderStart").val();
        var claimDeadLine = $("#claimDeadline").val();
        var kpDeadLine = $("#kPDeadline").val();
        var customer = $("#customer").val();
        var customerInn = $("#innCustomer").val();
        var sum = Number($("#sum").val());
        var comment = $("#comment").val();
        var dealType = Number($(":selected", $("#listDealTypes")).val());
        var tenderUrl = $("#tenderUrl").val();
        var managerId = $(":selected", $("#listManagers")).val();
        var managerSubDivision = $("#managerSubDivision").text();
        var model = {
            TenderNumber: tenderNumber,
            TenderStartString: tenderStart,
            ClaimDeadlineString: claimDeadLine,
            KPDeadlineString: kpDeadLine,
            Comment: comment,
            Customer: customer,
            CustomerInn: customerInn,
            Sum: sum,
            DealType: dealType,
            TenderUrl: tenderUrl,
            Manager: { Id: managerId, SubDivision: managerSubDivision }
        };
        $.ajax({
            url: "/Claim/SaveClaim",
            type: 'POST',
            dataType: 'json',
            data: JSON.stringify(model),
            processData: false,
            contentType: 'application/json; charset = utf-8 ',
            success: saveClaimComplete
        });
    }

    function saveClaimComplete (data) {
        if (data.IsComplete) {
            claim = data.Model;
            showClaimReadOnly(claim);
            $("#butSaveClaim").hide();
            $("#butSetClaimOnWork").show();
            $("#excelPanel").show(250);
            $("#positionPanel").show(250);
            var obj = {
                type: "setClaimId",
                error: false,
                message: claim.Id
            }
            var message = JSON.stringify(obj);
            sendMessage(message);
        } else {
            showMessage("Ошибка при сохранении заявки");
        }
    }

    function showClaimReadOnly(model) {
        var controlNames = ["#tenderNumber", "#tenderStart", "#claimDeadline", "#kPDeadline", "#customer", "#innCustomer", "#sum", "#comment", "#listDealTypes", "#tenderUrl", "#listManagers", "#managerSubDivision"];
        var controlsLength = controlNames.length;
        for (var i = 0; i < controlsLength; i++) {
            $(controlNames[i]).css("display", "none");
            $(controlNames[i] + "Label").css("display", "block");
        }
        $("#tenderNumberLabel").text(model.TenderNumber != null ? model.TenderNumber : "");
        $("#tenderStartLabel").text(model.TenderStartString);
        $("#claimDeadlineLabel").text(model.ClaimDeadlineString);
        $("#kPDeadlineLabel").text(model.KPDeadlineString);
        $("#customerLabel").text(model.Customer);
        $("#innCustomerLabel").text(model.CustomerInn);
        var sum = "";
        if (model.Sum != 0) {
            sum = model.Sum.toFixed(2);
        }
        $("#sumLabel").text(sum);
        $("#commentLabel").text(model.Comment != null ? model.Comment : "");
        var dealType = getDealTypeById(model.DealType);
        $("#listDealTypesLabel").text(dealType.Value);
        $("#tenderUrlLabel").text(model.TenderUrl != null ? model.TenderUrl : "");
        $("#listManagersLabel").text(model.Manager.Name);
        $("#managerSubDivisionLabel").text(model.Manager.SubDivision);
        var status = getClaimStatusById(model.ClaimStatus);
        if (status == null) {
            status = { Value: "Неопределен" };
        }
        $("#claimStatus").text(status.Value);
    }

    function isValidClaim() {
        var obj = { isValid: true, message: "" };
        var message = "";
        var tenderStart = $("#tenderStart").val();
        var claimDeadLine = $("#claimDeadline").val();
        var kpDeadLine = $("#kPDeadline").val();
        var customer = $("#customer").val();
        var customerInn = $("#innCustomer").val();
        var sum = $("#sum").val();
        if (tenderStart.trim() == "") {
            obj.isValid = false;
            obj.message = "Заполните поле Дата начала";
        }
        if (claimDeadLine.trim() == "") {
            message = "Заполните поле Срок сдачи";
            if (obj.message.trim() != "") {
                message = "<br/>" + message;
            }
            obj.isValid = false;
            obj.message += message;
        }
        if (kpDeadLine.trim() == "") {
            message = "Заполните поле Срок сдачи КП";
            if (obj.message.trim() != "") {
                message = "<br/>" + message;
            }
            obj.isValid = false;
            obj.message += message;
        }
        if (customer.trim() == "") {
            message = "Заполните поле Заказчик";
            if (obj.message.trim() != "") {
                message = "<br/>" + message;
            }
            obj.isValid = false;
            obj.message += message;
        }
        if (customerInn.trim() == "") {
            message = "Заполните поле ИНН заказчика";
            if (obj.message.trim() != "") {
                message = "<br/>" + message;
            }
            obj.isValid = false;
            obj.message += message;
        }
        if (sum.trim() != "") {
            if (isNaN(Number(sum))) {
                message = "Значение в поле Сумма с НДС не является числом";
                if (obj.message.trim() != "") {
                    message = "<br/>" + message;
                }
                obj.isValid = false;
                obj.message += message;
            }
        }
        return obj;
    }

    function openFile() {
        showMessage("");
        var obj = {
            type: "mainWindow",
            error: false,
            message: "openFile"
        }
        var message = JSON.stringify(obj);
        sendMessage(message);
    }

    function sendMessage(message) {
        var target = getTargetOrigin();
        document.getElementById("uploadFile").contentWindow.postMessage(message, target);
    }

    function getTargetOrigin() {
        var url = document.location.href;
        url = url.replace("http://", "");
        var index = url.indexOf("/");
        url = url.substr(0, index);
        url = "http://" + url;
        return url;
    }

    function messageHandler(e) {
        var data = e.data;
        var obj = $.parseJSON(data);
        if (obj.type.trim() == "UploadFrameLoaded") {
            if (initClaimIdNedded) {
                var objM = {
                    type: "setClaimId",
                    error: false,
                    message: claim.Id
                }
                var message = JSON.stringify(objM);
                sendMessage(message);
            }
        }
        if (obj.type.trim() == "DownloadExcel") {
            if (obj.error == true) {
                showMessage("Ошибка при скачивании файла!");
            }
        }
        if (obj.type.trim() == "UploadExcel") {
            if (obj.error == true) {
                showMessage(obj.message);
            }
        }
        if (obj.type.trim() == "UploadExcelResult") {
            if (obj.error == true) {
                showMessage(obj.message);
            } else {
                var positions = obj.message;
                var container = $("#positionTable");
                if (positions != null) {
                    var positionsLength = positions.length;
                    for (var i = 0; i < positionsLength; i++) {
                        var position = positions[i];
                        var element = getPositionElement(position);
                        container.append(element);
                    }
                }
            }
        }
    }

    function getPositionElement(position) {
        var element = $("<tr positionId='" + position.Id + "'></tr>");
        var value = "";
        if (position.RowNumber != 0) {
            value = position.RowNumber;
        }
        element.append("<td><button type='button' modeType='editButton' class='btn btn-success'>Изменить</button><div type='editActionPanel' style='display: none; text-align: center;'><button type='button' modeType='editButtonOK' class='btn btn-success' style='margin-bottom: 4px;'>Ок</button><br/><button type='button' modeType='editButtonCancel' class='btn btn-danger'>Отмена</button></div></td>");
        element.append("<td><span type='rowNumberLabel'>" + value + "</span><input type='text' modelType='rowNumberValue' value='" + value + "' style='display:none; width: 80px;' /></td>");
        element.append("<td><span type='catalogNumberLabel'>" + position.CatalogNumber + "</span><input type='text' modelType='catalogNumberValue' value='" + position.CatalogNumber + "' style='display:none; width: 100px;' /></td>");
        element.append("<td><span type='nameLabel'>" + position.Name + "</span><input type='text' modelType='nameValue' value='" + position.Name + "' style='display:none; width: 180px;' /></td>");
        element.append("<td><span type='replaceLabel'>" + position.Replace + "</span><input type='text' modelType='replaceValue' value='" + position.Replace + "' style='display:none; width: 180px;' /></td>");
        var unitElement = $("<td><span type='unitLabel' val='" + position.Unit + "'>" + getUnitString(position.Unit) + "</span></td>");
        var unitsList = getUnitsList(position.Unit);
        unitsList.css("width", 70);
        unitElement.append(unitsList);
        unitsList.hide();
        element.append(unitElement);
        element.append("<td><span type='valueLabel'>" + position.Value + "</span><input type='text' modelType='valueValue' value='" + position.Value + "' style='display:none; width: 60px;' /></td>");
        var productManagerElement = $("<td><span type='productManagerLabel' val='" + position.ProductManager.Id + "'>" + position.ProductManager.Name + "</span></td>");
        var productManagersList = getProductManagersList(position.ProductManager.Id);
        productManagersList.css("width", 160);
        productManagerElement.append(productManagersList);
        productManagersList.hide();
        element.append(productManagerElement);
        element.append("<td><div type='commentLabel'  style='max-width: 260px;'>" + position.Comment + "</div><textarea rows='3' modelType='commentValue' value='" + position.Value + "' style='display:none;' ></textarea></td>");
        var price = "";
        if (position.Price != 0) price = position.Price.toFixed(2);
        element.append("<td><span type='priceLabel'>" + price + "</span><input type='text' modelType='priceValue' value='" + price + "' style='display:none; width: 90px;' /></td>");
        var sum = "";
        if (position.Sum != 0) sum = position.Sum.toFixed(2);
        element.append("<td><span type='sumLabel'>" + sum + "</span><input type='text' modelType='sumValue' value='" + sum + "' style='display:none; width: 90px;' /></td>");
        element.append("<td><button type='button' modeType='deleteButton' class='btn btn-danger'>Удалить</button></td>");
        var editModeButton = $("button[modeType='editButton']", element);
        editModeButton.click(editModeButtonClick);
        var editButtonCancel = $("button[modeType='editButtonCancel']", element);
        editButtonCancel.click(editButtonCancelClick);
        var editButtonOk = $("button[modeType='editButtonOK']", element);
        editButtonOk.click(editButtonOkClick);
        var deleteButton = $("button[modeType='deleteButton']", element);
        deleteButton.click(deleteButtonClick);
        return element;
    }

    function addPositionButtonClick(e) {
        showMessage("");
        var row = $("#addPositionRow");
        var obj = getClaimPositionFromRow(row);
        if (obj.error) {
            showMessage(obj.message);
        } else {
            var model = obj.model;
            model.IdClaim = claim.Id;
            $.ajax({
                url: "/Claim/AddClaimPosition",
                type: 'POST',
                dataType: 'json',
                data: JSON.stringify(model),
                processData: false,
                contentType: 'application/json; charset = utf-8 ',
                success: function(data) {
                    if (data.IsComplete) {
                        $("[modeltype='rowNumberValue']", row).val("");
                        $("[modeltype='catalogNumberValue']", row).val("");
                        $("[modeltype='nameValue']", row).val("");
                        $("[modeltype='replaceValue']", row).val("");
                        $("[modeltype='valueValue']", row).val("");
                        $("[modeltype='commentValuel']", row).val("");
                        $("[modeltype='priceValue']", row).val("");
                        $("[modeltype='sumValue']", row).val("");
                        var container = $("#positionTable");
                        var element = getPositionElement(data.Model);
                        container.append(element);
                    } else {
                        showMessage("Ошибка при добавлении позиции спецификации");
                    }
                }
            });
        }
    }

    function deleteButtonClick(e) {
        showMessage("");
        var button = $(e.currentTarget);
        var row = button.parent().parent();
        var id = Number(row.attr("positionId"));
        row.css("backgroundColor", "aqua");
        messageUi.confirm("Вы уверены что хотите удалить выделенную запись?", function() {
            row.css("backgroundColor", "transparent");
            $.ajax({
                url: "/Claim/DeleteClaimPosition?id=" + id,
                type: 'GET',
                contentType: 'application/json; charset = utf-8 ',
                success: function(data) {
                    if (data.IsComplete) {
                        row.remove();
                    } else {
                        showMessage("Запись не удалена из БД");
                    }
                }
            });
        }, function() {
            row.css("backgroundColor", "transparent");
        });
    }

    function editModeButtonClick(e) {
        var button = $(e.currentTarget);
        var row = button.parent().parent();
        button.hide();
        $("[type='editActionPanel']", row).show();
        var controls = ["rowNumber", "catalogNumber", "name", "replace", "value", "comment", "price", "sum"];
        var controlsLength = controls.length;
        for (var i = 0; i < controlsLength; i++) {
            $("[type='" + controls[i] + "Label']", row).hide();
            $("[modelType='" + controls[i] + "Value']", row).show();
            $("[modelType='" + controls[i] + "Value']", row).val($("[type='" + controls[i] + "Label']", row).text());
        }
        $("[type='unitLabel']", row).hide();
        $("[type='unitsList']", row).show();
        selectListElement($("[type='unitsList']", row), $("[type='unitLabel']", row).attr("val"));
        $("[type='productManagerLabel']", row).hide();
        $("[type='productManagersList']", row).show();
        selectListElement($("[type='productManagersList']", row), $("[type='productManagerLabel']", row).attr("val"));
    }

    function editButtonCancelClick(e) {
        var button = $(e.currentTarget);
        var row = button.parent().parent().parent();
        button.parent().hide();
        $("[modeType='editButton']", row).show();
        var controls = ["rowNumber", "catalogNumber", "name", "replace", "value", "comment", "price", "sum"];
        var controlsLength = controls.length;
        for (var i = 0; i < controlsLength; i++) {
            $("[type='" + controls[i] + "Label']", row).show();
            $("[modelType='" + controls[i] + "Value']", row).hide();
        }
        $("[type='unitLabel']", row).show();
        $("[type='unitsList']", row).hide();
        $("[type='productManagerLabel']", row).show();
        $("[type='productManagersList']", row).hide();
    }

    function editButtonOkClick(e) {
        showMessage("");
        var button = $(e.currentTarget);
        var row = button.parent().parent().parent();
        var obj = getClaimPositionFromRow(row);
        if (obj.error) {
            showMessage(obj.message);
        } else {
            var model = obj.model;
            model.IdClaim = claim.Id;
            model.Id = Number(row.attr("positionId"));
            $.ajax({
                url: "/Claim/EditClaimPosition",
                type: 'POST',
                dataType: 'json',
                data: JSON.stringify(model),
                processData: false,
                contentType: 'application/json; charset = utf-8 ',
                success: function(data) {
                    if (data.IsComplete) {
                        $("[type='rowNumberLabel']", row).text(model.RowNumber != 0 ? model.RowNumber : "");
                        $("[type='catalogNumberLabel']", row).text(model.CatalogNumber);
                        $("[type='nameLabel']", row).text(model.Name);
                        $("[type='replaceLabel']", row).text(model.Replace);
                        $("[type='unitLabel']", row).text(getUnitString(model.Unit));
                        $("[type='unitLabel']", row).attr("val", model.Unit);
                        $("[type='valueLabel']", row).text(model.Value);
                        $("[type='productManagerLabel']", row).text(model.ProductManager.Name);
                        $("[type='productManagerLabel']", row).attr("val", model.ProductManager.Id);
                        $("[type='commentLabel']", row).text(model.Comment);
                        $("[type='priceLabel']", row).text(model.Price != 0 ? model.Price.toFixed(2) : "");
                        $("[type='sumLabel']", row).text(model.Sum != 0 ? model.Sum.toFixed(2) : "");
                        button.parent().hide();
                        $("[modeType='editButton']", row).show();
                        var controls = ["rowNumber", "catalogNumber", "name", "replace", "value", "comment", "price", "sum"];
                        var controlsLength = controls.length;
                        for (var i = 0; i < controlsLength; i++) {
                            $("[type='" + controls[i] + "Label']", row).show();
                            $("[modelType='" + controls[i] + "Value']", row).hide();
                        }
                        $("[type='unitLabel']", row).show();
                        $("[type='unitsList']", row).hide();
                        $("[type='productManagerLabel']", row).show();
                        $("[type='productManagersList']", row).hide();
                    } else {
                        showMessage("Ошибка при изменении позиции спецификации");
                    }
                }
            });
        }
    }

    function getClaimPositionFromRow(row) {
        var obj = { error: false, message: "", model: null };
        var rowNumber = $("[modelType='rowNumberValue']", row).val();
        var message = "";
        if (rowNumber.trim() != "") {
            if (isNaN(Number(rowNumber.trim())))  {
                obj.error = true;
                obj.message = "Значение '" + rowNumber.trim() + "' в поле Порядковый номер не является целым числом";
            } else {
                if (rowNumber.trim().indexOf(".") != -1) {
                    obj.error = true;
                    obj.message = "Значение '" + rowNumber.trim() + "' в поле Порядковый номер не является целым числом";
                }
            }
        }
        var name = $("[modelType='nameValue']", row).val();
        if (name.trim() == "") {
            message = "Заполните обязательное поле Наименование";
            if (obj.message.trim() != "") {
                message = "<br/>" + message;
            }
            obj.error = true;
            obj.message += message;
        }
        var value = $("[modelType='valueValue']", row).val();
        if (value.trim() == "") {
            message = "Заполните обязательное поле Количество";
            if (obj.message.trim() != "") {
                message = "<br/>" + message;
            }
            obj.error = true;
            obj.message += message;
        } else {
            if (isNaN(Number(value.trim())))  {
                message = "Значение '" + value.trim() + "' в поле Количество не является целым числом";
                if (obj.message.trim() != "") {
                    message = "<br/>" + message;
                }
                obj.error = true;
                obj.message += message;
            } else {
                if (value.trim().indexOf(".") != -1) {
                    message = "Значение '" + value.trim() + "' в поле Количество не является целым числом";
                    if (obj.message.trim() != "") {
                        message = "<br/>" + message;
                    }
                    obj.error = true;
                    obj.message += message;
                }
            }
        }
        var price = $("[modelType='priceValue']", row).val();
        if (price.trim() != "") {
            if (isNaN(Number(price.trim())))  {
                message = "Значение '" + price.trim() + "' в поле Цена за единицу максимум не является числом";
                if (obj.message.trim() != "") {
                    message = "<br/>" + message;
                }
                obj.error = true;
                obj.message += message;
            }
        }
        var sum = $("[modelType='sumValue']", row).val();
        if (sum.trim() != "") {
            if (isNaN(Number(sum.trim())))  {
                message = "Значение '" + sum.trim() + "' в поле Сумма максимум за единицу максимум не является числом";
                if (obj.message.trim() != "") {
                    message = "<br/>" + message;
                }
                obj.error = true;
                obj.message += message;
            }
        }
        if (!obj.error) {
            if (rowNumber.trim() != "") rowNumber = Number(rowNumber.trim());
            else rowNumber = 0;
            value = Number(value.trim());
            if (price.trim() != "") price = Number(price.trim());
            else price = 0;
            if (sum.trim() != "") sum = Number(sum.trim());
            else sum = 0;
            var catalogNumber = $("[modelType='catalogNumberValue']", row).val().trim();
            var replace = $("[modelType='replaceValue']", row).val().trim();
            var unit = Number($(":selected", $("[type='unitsList']", row)).val());
            var productManager = getProductManagerById($(":selected", $("[type='productManagersList']", row)).val().trim());
            var comment = $("[modelType='commentValue']", row).val().trim();
            var model = {
                RowNumber: rowNumber,
                CatalogNumber: catalogNumber,
                Name: name,
                Replace: replace,
                Unit: unit,
                Value: value,
                ProductManager: productManager,
                Comment: comment,
                Price: price,
                Sum: sum,
            };
            obj.model = model;
        }
        return obj;
    }

    function getUnitString(unit) {
        var result = "";
        switch (unit) {
            case 1:
                result = "Шт";
                break;
            case 2:
                result = "Упак";
                break;
        }
        return result;
    }

    function getExcelFileFromServer() {
        $("body").append("<iframe src='/Claim/GetSpecificationFile' width='0' height='0' style='display: none;' align='left'></iframe>");
    }

    function initManagersList() {
        if (managers == null || managers.length == 0) return;
        var list = $("#listManagers");
        var managersLength = managers.length;
        for (var i = 0; i < managersLength; i++) {
            var manager = managers[i];
            var option = $("<option value='" + manager.Id + "'>" + manager.Name + "</option>");
            list.append(option);
        }
        list.change(function() {
            var selElement = $(":selected", list);
            if (selElement != null) {
                var id = selElement.val();
                var selManager = getManagerById(id);
                if (selManager != null) {
                    $("#managerSubDivision").text(selManager.SubDivision);
                }
            }
        });
        list.change();
    }

    function initDealTypesList() {
        if (dealTypes == null || dealTypes.length == 0) return;
        var list = $("#listDealTypes");
        var dealTypesLength = dealTypes.length;
        for (var i = 0; i < dealTypesLength; i++) {
            var dealType = dealTypes[i];
            var option = $("<option value='" + dealType.Id + "'>" + dealType.Value + "</option>");
            list.append(option);
        }
    }

    function getManagerById(id) {
        var manager = null;
        var managersLength = managers.length;
        for (var i = 0; i < managersLength; i++) {
            var model = managers[i];
            if (model.Id.trim().toLowerCase() == id.trim().toLowerCase()) {
                manager = model;
                break;
            }
        }
        return manager;
    }

    function getProductManagerById(id) {
        var manager = null;
        var managersLength = productManagers.length;
        for (var i = 0; i < managersLength; i++) {
            var model = productManagers[i];
            if (model.Id.trim().toLowerCase() == id.trim().toLowerCase()) {
                manager = model;
                break;
            }
        }
        return manager;
    }

    function getDealTypeById(id) {
        id = Number(id);
        var dealType = null;
        var dealTypesLength = dealTypes.length;
        for (var i = 0; i < dealTypesLength; i++) {
            var model = dealTypes[i];
            if (model.Id == id) {
                dealType = model;
                break;
            }
        }
        return dealType;
    }

    function getClaimStatusById(id) {
        id = Number(id);
        var status = null;
        var statusLength = claimStatus.length;
        for (var i = 0; i < statusLength; i++) {
            var model = claimStatus[i];
            if (model.Id == id) {
                status = model;
                break;
            }
        }
        return status;
    }

    function getProductManagersList(productManagerId) {
        var list = $("<select size='1' type='productManagersList'></select>");
        var productManagersLength = productManagers.length;
        for (var i = 0; i < productManagersLength; i++) {
            var model = productManagers[i];
            var option = $("<option value='" + model.Id + "'>" + model.Name + "</option>");
            if (productManagerId != null && model.Id == productManagerId) {
                option.attr("selected", "selected");
            }
            list.append(option);
        }
        return list;
    }

    function getUnitsList(unit) {
        var units = [{ Id: 1, Value: "Шт" }, { Id: 2, Value: "Упак" }];
        var list = $("<select size='1' type='unitsList'></select>");
        var unitsLength = units.length;
        for (var i = 0; i < unitsLength; i++) {
            var model = units[i];
            var option = $("<option value='" + model.Id + "'>" + model.Value + "</option>");
            if (unit != null && model.Id == unit) {
                option.attr("selected", "selected");
            }
            list.append(option);
        }
        return list;
    }

    function selectListElement(list, selectedValue) {
        var options = $("option", list);
        $.each(options, function(index, elem) {
            $(elem).removeAttr("selected");
            if ($(elem).val().trim() == selectedValue.trim()) {
                $(elem).attr("selected", "selected");
            }
        });
    }
</script>
<div>
    <div class="panel panel-default">
        <div class="panel-heading">
            <h4>
                Новая заявка/Заявка №
            </h4>
        </div>
        <div class="panel-body">
            <div class="form-horizontal val-form" role="form">
                <div class="form-group">
                    <label class="col-sm-2 control-label">№ конкурса</label>
                    <div class="col-sm-10">
                        <input type="text" id="tenderNumber" class="form-control"/>
                        <span id="tenderNumberLabel" style="display: none;" class="form-control"></span>
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-2 control-label required-mark">Дата начала</label>
                    <div class="col-sm-10">
                        <input type="text" id="tenderStart" readonly="readonly" style="cursor: pointer;" class="form-control datepicker-btn"/>
                        <span id="tenderStartLabel" style="display: none;" class="form-control"></span>
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-2 control-label required-mark">Срок сдачи</label>
                    <div class="col-sm-10">
                        <input type="text" id="claimDeadline" readonly="readonly" style="cursor: pointer;" class="form-control datepicker-btn" />
                        <span id="claimDeadlineLabel" style="display: none;" class="form-control"></span>
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-2 control-label required-mark">Срок подачи КП</label>
                    <div class="col-sm-10">
                        <input type="text" id="kPDeadline" readonly="readonly" style="cursor: pointer;" class="form-control datepicker-btn" />
                        <span id="kPDeadlineLabel" style="display: none;" class="form-control"></span>
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-2 control-label">Комментарий</label>
                    <div class="col-sm-10">
                        <textarea rows="7" id="comment" class="form-control"></textarea>
                        <div id="commentLabel" style="display: none;" class="form-control"></div>
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-2 control-label required-mark">Заказчик</label>
                    <div class="col-sm-10">
                        <input type="text" id="customer" class="form-control"/>
                        <span id="customerLabel" style="display: none;" class="form-control"></span>
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-2 control-label required-mark">ИНН заказчика</label>
                    <div class="col-sm-10">
                        <input type="text" id="innCustomer" class="form-control"/>
                        <span id="innCustomerLabel" style="display: none;" class="form-control"></span>
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-2 control-label">Сумма с НДС</label>
                    <div class="col-sm-10">
                        <input type="text" id="sum" class="form-control"/>
                        <span id="sumLabel" style="display: none;" class="form-control"></span>
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-2 control-label required-mark">Тип сделки</label>
                    <div class="col-sm-10">
                        <select size="1" id="listDealTypes" class="form-control"></select>
                        <span id="listDealTypesLabel" style="display: none;" class="form-control"></span>
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-2 control-label">Ссылка на закупки</label>
                    <div class="col-sm-10">
                        <input type="text" id="tenderUrl" class="form-control"/>
                        <span id="tenderUrlLabel" style="display: none;" class="form-control"></span>
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-2 control-label required-mark">Менеджер</label>
                    <div class="col-sm-10">
                        <select size="1" id="listManagers" class="form-control"></select>
                        <span id="listManagersLabel" style="display: none;" class="form-control"></span>
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-2 control-label">Подразделение</label>
                    <div class="col-sm-10">
                        <span id="managerSubDivision"></span>
                        <span id="managerSubDivisionLabel" style="display: none;" class="form-control"></span>
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-offset-2 col-sm-10">
                        <button type="button" id="butSaveClaim" class="btn btn-primary"><i class="fa fa-save"></i> сохранить</button>
                        <button type="button" id="butSetClaimOnWork" style="display: none;" class="btn btn-success"><i class="fa fa-mail-forward"></i> в работу</button>
                    </div>
                </div>
                <div id="excelPanel" style="display: inline-block; vertical-align: top; margin-top: 4px;">
                    <button id="butGetFile" type="button" class="btn btn-info">Скачать шаблон спецификации</button>
                    <button id="butUploadFile" type="button" class="btn btn-success" style="margin-left: 8px;">Загрузить спецификацию</button>
                    <iframe id="uploadFile" src="/Claim/UploadFileForm" style="display: none;"></iframe>
                </div><br/>
                <div id="errorPanel" style="display: inline-block; vertical-align: top; margin-top: 4px; color: red;"></div>
            </div>
        </div>
        </div>
           
            <div id="positionPanel" style="display: none; margin-left: 4px; margin-right: 4px;">
                <h5>Список позиций</h5>
                <table class="table table-striped small">
                    <thead>
                        <tr>
                            <th></th>
                            <th>№ П/п</th>
                            <th>Каталожный номер</th>
                            <th>Наименование</th>
                            <th>Замена</th>
                            <th>Ед.</th>
                            <th>Количество</th>
                            <th>Снабженец</th>
                            <th>Комментарий</th>
                            <th>Цена за ед. максимум</th>
                            <th>Сумма максимум</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody id="positionTable">
                        <tr id="addPositionRow">
                            <td><button type="button" id="btnEditPosition" class="btn btn-link"><i class="fa fa-edit"></i></button></td>
                            <td><input type='text' modeltype='rowNumberValue' /></td>
                            <td><input type='text' modeltype='catalogNumberValue' /></td>
                            <td><input type='text' modeltype='nameValue' /></td>
                            <td><input type='text' modeltype='replaceValue' /></td>
                            <td id="unitCell"></td>
                            <td><input type='text' modeltype='valueValue' /></td>
                            <td id="managersCell"></td>
                            <td><textarea rows='3' modeltype='commentValue'></textarea></td>
                            <td><input type='text' modeltype='priceValue' /></td>
                            <td><input type='text' modeltype='sumValue' /></td>
                            <td><button type="button" id="btnDeletePosition" class="btn btn-link"><i class="fa fa-trash"></i></button></td>
                        </tr>
                    </tbody>
                </table>
                <div>
                    <button type="button" id="butAddPosition" class="btn btn-default"><i class="fa fa-plus-circle"></i> позиция</button>
                </div>
            </div>
        </div>
