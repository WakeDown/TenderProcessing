@using System.Web.Script.Serialization
@using TenderProcessingDataAccessLayer.Models

@{
    ViewBag.Title = "Список заявок";
    Layout = "~/Views/Shared/_MasterPage.cshtml";
    var serializer = new JavaScriptSerializer();
    var dealTypes = (List<DealType>)ViewBag.DealTypes;
    var claimStatus = (List<ClaimStatus>)ViewBag.ClaimStatus;
    var claims = (List<TenderClaim>)ViewBag.Claims;
    var managers = (List<Manager>)ViewBag.Managers;
    var productManagers = (List<ProductManager>)ViewBag.ProductManagers;
    var claimCount = (int)ViewBag.ClaimCount;
}
<link href="~/Content/bootstrap-datepicker3.css" rel="stylesheet" />
<script src="~/Scripts/bootstrap-datepicker.js"></script>
<script type="text/javascript">
    var dealTypes = @Html.Raw(serializer.Serialize(dealTypes));
    var claimStatus = @Html.Raw(serializer.Serialize(claimStatus));
    var claims = @Html.Raw(serializer.Serialize(claims));
    var managers = @Html.Raw(serializer.Serialize(managers));
    var productManagers = @Html.Raw(serializer.Serialize(productManagers));
    var settings = @Html.Raw(serializer.Serialize(ViewBag.Settings));
    var tenderStatus = @Html.Raw(serializer.Serialize(ViewBag.TenderStatus));
    var errorLoad = @ViewBag.Error;

    $(init);

    function init() {
        if (errorLoad) {
            alert("Произошла ошибка при загрузке");
            return;
        }
        $.fn.datepicker.dates['ru'] = {
            days: ["Воскресенье", "Понедельник", "Вторник", "Среда", "Четверг", "Пятница", "Суббота", "Воскресенье"],
            daysShort: ["Вск", "Пнд", "Втр", "Срд", "Чтв", "Птн", "Суб", "Вск"],
            daysMin: ["Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб", "Вс"],
            months: ["Январь", "Февраль", "Март", "Апрель", "Май", "Июнь", "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь"],
            monthsShort: ["Янв", "Фев", "Мар", "Апр", "Май", "Июн", "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек"],
            today: "Сегодня"
        };
        messageUi.initProgressImage();
        window.addEventListener("message", messageHandler, true);
        if (settings.newClaim == "false") $("#newClaimNavButton").hide();
        initClaimsElements(claims);
        var managerId = (settings.filterManager != "") ? settings.filterManager : "";
        initFilterManagersList(managerId);
        var productId = (settings.filterProduct != "") ? settings.filterProduct : "";
        initFilterProductManagersList(productId);
        initFilterManagerSubDivisionsList();
        if (settings.filterClaimStatus != null && settings.filterClaimStatus.length > 0) {
            initFilterClaimStatus(settings.filterClaimStatus);
        }
        $("#filterTenderStartFrom").datepicker({
            format: "dd.mm.yyyy",
            autoclose: true,
            todayBtn: "linked",
            language: "ru"
        });
        $("#filterTenderStartTo").datepicker({
            format: "dd.mm.yyyy",
            autoclose: true,
            todayBtn: "linked",
            language: "ru"
        });
        $("#filterTenderStartFrom").add("#filterTenderStartTo").change(function(e) {
            var datepicker = $(e.currentTarget);
            var dt = datepicker.datepicker("getDate");
            var dateString = getDateString(dt);
            datepicker.val(dateString);
        });
        $("#clearDates").click(function() {
            $("#filterTenderStartFrom").val("");
            $("#filterTenderStartTo").val("");
        });
        $("#acceptFilter").click(filter);
        $("#clearFilter").click(clearFilter);
        $("#saveFilterInExcel").click(filterInExcel);
        $("#showCountLabel").text(claims.length);
        if (!settings.reportExcel) {
            $("#saveFilterInExcel").hide();
        }
    }

    //Фильтрация
    function filter(e) {
        var obj = getFilterObj();
        if (!obj.isValid) {
            alert(obj.message);
            return;
        }
        messageUi.progressShow();
        $.ajax({
            url: "/Claim/FilterClaim",
            type: 'POST',
            dataType: 'json',
            data: JSON.stringify(obj.model),
            processData: false,
            contentType: 'application/json; charset = utf-8 ',
            success: function(data) {
                messageUi.progressHide();
                if (data.IsComplete) {
                    claims = data.Claims;
                    initClaimsElements(claims);
                    $("#claimCountLabel").text(data.Count);
                    $("#showCountLabel").text(claims.length);
                } else {
                    alert("Ошибка при фильтрации заявок");
                }
            }
        });
    }

    function filterInExcel(e) {
        var obj = getFilterObj();
        if (!obj.isValid) {
            alert(obj.message);
            return;
        }
        var json = JSON.stringify(obj.model);
        var urlJson = encodeURI(json);
        $("body").append("<iframe src='/Claim/GetListExcelFile?modelJson=" + urlJson + "' width='0' height='0' style='display: none;' align='left'></iframe>");
    }

    function clearFilter(e) {
        var model = {};
        var rowCount = $("#filterRowCount").val().trim();
        rowCount = rowCount.replace(",", ".");
        if (rowCount != "") {
            if (!isNaN(rowCount)) {
                if (rowCount.indexOf(".") == -1) {
                    rowCount = Number(rowCount);
                    if (rowCount < 0) {
                        $("#filterRowCount").val();
                    }
                    if (rowCount > 0) {
                        model.RowCount = rowCount;
                    }
                } else {
                    $("#filterRowCount").val("");
                }
            } else {
                $("#filterRowCount").val("");
            }
        }
        $("#filterIdClaim").val("");
        $("#filterTenderNumber").val("");
        $("#filterTenderStartFrom").val("");
        $("#filterTenderStartTo").val("");
        $("#filterClaimOverdueNot").get(0).checked = true;
        $(":first", $("#filterManagers")).attr("selected", "selected");
        $(":first", $("#filterClaimStatus")).attr("selected", "selected");
        $(":first", $("#filterManagerSubDivisions")).attr("selected", "selected");
        $(":first", $("#filterProductManagers")).attr("selected", "selected");
        var filterStatusControls = ["filterClaimStatusCreated", "filterClaimStatusTransmissed", "filterClaimStatusInWork", "filterClaimStatusStopped", "filterClaimStatusCancelled", "filterClaimStatusSameCalculated", "filterClaimStatusCalculated", "filterClaimStatusConfirmed"];
        var controlsLength = filterStatusControls.length;
        for (var i = 0; i < controlsLength; i++) {
            var control = $("#" + filterStatusControls[i]);
            control.get(0).checked = false;
        }
        messageUi.progressShow();
        $.ajax({
            url: "/Claim/FilterClaim",
            type: 'POST',
            dataType: 'json',
            data: JSON.stringify(model),
            processData: false,
            contentType: 'application/json; charset = utf-8 ',
            success: function(data) {
                messageUi.progressHide();
                if (data.IsComplete) {
                    claims = data.Claims;
                    initClaimsElements(claims);
                    $("#claimCountLabel").text(data.Count);
                    $("#showCountLabel").text(claims.length);
                } else {
                    alert("Ошибка при фильтрации заявок");
                }
            }
        });
    }

    function getFilterObj() {
        //получение настроек фильтра из формы и проверка валидности введенных значений
        var obj = { isValid: true, message: "", model: null };
        var model = {};
        var message = "";
        var rowCount = $("#filterRowCount").val().trim();
        rowCount = rowCount.replace(",", ".");
        if (rowCount != "") {
            if (!isNaN(rowCount)) {
                if (rowCount.indexOf(".") == -1) {
                    rowCount = Number(rowCount);
                    if (rowCount < 0) {
                        obj.isValid = false;
                        obj.message = "Количество строк не может быть отрицательным";
                    }
                    if (rowCount > 0) {
                        model.RowCount = rowCount;
                    }
                } else {
                    obj.isValid = false;
                    obj.message = "Значение '" + rowCount + "' в поле Количество строк не является целым числом";
                }
            } else {
                obj.isValid = false;
                obj.message = "Значение '" + rowCount + "' в поле Количество строк не является целым числом";
            }
        }
        var claimId = $("#filterIdClaim").val().trim();
        if (claimId != "") {
            if (!isNaN(claimId)) {
                if (claimId.indexOf(".") == -1) {
                    claimId = Number(claimId);
                    if (claimId < 0) {
                        message = "№ Заявки не может быть отрицательным";
                        if (obj.message.trim() != "") {
                            message = "\r" + message;
                        }
                        obj.isValid = false;
                        obj.message = message;
                    }
                    if (claimId > 0) {
                        model.IdClaim = claimId;
                    }
                } else {
                    message = "Значение '" + claimId + "' в поле № Заявки не является целым числом";
                    if (obj.message.trim() != "") {
                        message = "\r" + message;
                    }
                    obj.isValid = false;
                    obj.message = message;
                }
            } else {
                message = "Значение '" + claimId + "' в поле № Заявки не является целым числом";
                if (obj.message.trim() != "") {
                    message = "\r" + message;
                }
                obj.isValid = false;
                obj.message = message;
            }
        }
        var tenderNumber = $("#filterTenderNumber").val().trim();
        if (tenderNumber != "") {
            model.TenderNumber = tenderNumber;
        }
        var status = [];
        var filterStatusControls = ["filterClaimStatusCreated", "filterClaimStatusTransmissed", "filterClaimStatusInWork", "filterClaimStatusStopped", "filterClaimStatusCancelled", "filterClaimStatusSameCalculated", "filterClaimStatusCalculated", "filterClaimStatusConfirmed"];
        var controlsLength = filterStatusControls.length;
        for (var i = 0; i < controlsLength; i++) {
            var control = $("#" + filterStatusControls[i]);
            if (control.get(0).checked) {
                status.push(Number(control.val()));
            }
        }
        model.ClaimStatus = status;
        var manager = $(":selected", $("#filterManagers")).val().trim();
        if (manager != "-1") {
            model.IdManager = manager;
        }
        var productManager = $(":selected", $("#filterProductManagers")).val().trim();
        if (productManager != -1) {
            model.IdProductManager = productManager;
        }
        var managerSubDivision = $(":selected", $("#filterManagerSubDivisions")).val().trim();
        if (managerSubDivision != -1) {
            model.ManagerSubDivision = managerSubDivision;
        }
        var tenderStartFrom = $("#filterTenderStartFrom").val().trim();
        if (tenderStartFrom != "") {
            model.TenderStartFrom = tenderStartFrom;
        }
        var tenderStartTo = $("#filterTenderStartTo").val().trim();
        if (tenderStartTo != "") {
            model.TenderStartTo = tenderStartTo;
        }
        if (tenderStartFrom != "" && tenderStartTo != "") {
            var dateFrom = $("#filterTenderStartFrom").datepicker("getDate").getTime();
            var dateTo = $("#filterTenderStartTo").datepicker("getDate").getTime();
            if (dateTo < dateFrom) {
                message = "Дата 'срок сдачи с' должна быть не позже даты 'срок сдачи по'";
                if (obj.message.trim() != "") {
                    message = "\r" + message;
                }
                obj.isValid = false;
                obj.message = message;
            }
        }
        var overdie = null;
        if ($("#filterClaimOverdueYes").get(0).checked) {
            overdie = true;
        }
        if ($("#filterClaimOverdueNo").get(0).checked) {
            overdie = false;
        }
        if (overdie != null) {
            model.Overdie = overdie;
        }
        if (obj.isValid) {
            obj.model = model;
        }
        return obj;
    }

    //инициализация эл. управления для фильтрации
    function initFilterClaimStatus(status) {
        var container = $("#filterClaimStatusPanel");
        var statusLength = status.length;
        for (var i = 0; i < statusLength; i++) {
            var value = status[i];
            var element = $("[value='" + value + "']", container).get(0);
            if (element != null) {
                element.checked = true;
            }
        }
    }

    function initFilterManagersList(id) {
        var managersLength = managers.length;
        var list = $("#filterManagers");
        var option = $("<option value='-1'>---Все---</option>");
        list.append(option);
        for (var i = 0; i < managersLength; i++) {
            var manager = managers[i];
            option = $("<option value='" + manager.Id + "'>" + manager.Name + "</option>");
            if (id != null && id != "" && manager.Id == id) option.attr("selected", "selected");
            list.append(option);
        }
    }

    function initFilterProductManagersList(id) {
        var managersLength = productManagers.length;
        var list = $("#filterProductManagers");
        var option = $("<option value='-1'>---Все---</option>");
        list.append(option);
        for (var i = 0; i < managersLength; i++) {
            var manager = productManagers[i];
            option = $("<option value='" + manager.Id + "'>" + manager.Name + "</option>");
            if (id != null && id != "" && manager.Id == id) option.attr("selected", "selected");
            list.append(option);
        }
    }

    function initFilterManagerSubDivisionsList() {
        var managersLength = managers.length;
        var list = $("#filterManagerSubDivisions");
        var option = $("<option value='-1'>---Все---</option>");
        list.append(option);
        for (var i = 0; i < managersLength; i++) {
            var manager = managers[i];
            option = $("<option value='" + manager.SubDivision + "'>" + manager.SubDivision + "</option>");
            list.append(option);
        }
    }

    //отображение списка заявок
    function initClaimsElements(list) {
        var container = $("#claimTable");
        container.empty();
        if (list == null) return;
        var listLength = list.length;
        for (var i = 0; i < listLength; i++) {
            var claim = list[i];
            var element = getClaimElement(claim);
            container.append(element);
        }
    }

    function getClaimElement(claim) {
        //получение разметки для заявки с учетом настроек функциональности
        var element = $("<tr claimId='" + claim.Id + "'></tr>");
        element.attr("type", "claimRow");
        if (settings.clickAction != "null") {
            element.css("cursor", "pointer");
        }
        var editCell = $("<td class='min-width text-nowrap'></td>");
        element.append(editCell);
        if (settings.showEdit)  {
            var editButton = $("<a type='claimPage' href='/Claim/Index?claimId=" + claim.Id  + "' class='btn btn-link btn-lg' data-toggle='tooltip' title='изменить'><i class='fa fa-edit'></i></a>");
            if (settings.userId == "" && settings.author == "") {
                editCell.append(editButton);
            } else {
                if (settings.author != "") {
                    if (claim.Author.Id == settings.author) {
                        editCell.append(editButton);
                    }
                }
                if (settings.filterManager != "") {
                    if (claim.Manager.Id == settings.filterManager || claim.Author.Id == settings.filterManager) {
                        editCell.append(editButton);
                    }
                }
            }
        }
        if (settings.showCalculate)  {
            var calculateButton = $("<a href='/Calc/Index?claimId=" + claim.Id  + "' class='btn btn-link btn-lg' data-toggle='tooltip' title='рассчитать'><i class='fa fa-calculator'></i></a>");
            if (settings.userId == "") {
                editCell.append(calculateButton);
            } else {
                if (settings.filterProduct != "") {
                    if (containsProduct(claim.ProductManagers, settings.filterProduct)) {
                        editCell.append(calculateButton);
                    }
                }
            }
        }
        element.append("<th><span>" + claim.Id + "</span></th>");
        element.append("<td><span>" + claim.TenderNumber + "</span></td>");
        element.append("<td><span>" + claim.Customer + "</span></td>");
        var sum = "";
        if (claim.Sum > 0) {
            sum = claim.Sum.toFixed(2);
        }
        element.append("<td><span>" + sum + "</span></td>");
        element.append("<td><span>" + claim.Manager.ShortName + "</span></td>");
        element.append("<td><span>Всего: " + claim.PositionsCount + "<br/>Расчетов: " + claim.CalculatesCount + "</span></td>");
        element.append("<td><span>" + getProductManagersString(claim.ProductManagers) + "</span></td>");
        element.append("<td><span>" + getDealTypeById(claim.DealType).Value + "</span></td>");
        element.append("<td><span>" + getClaimStatusById(claim.ClaimStatus).Value + "</span></td>");
        element.append("<td><span>" + claim.RecordDateString.split(" ")[0] + "<span/></td>");
        element.append("<td><span>" + claim.ClaimDeadlineString + "<span/></td>");
        var tenderStatusCell = $("<td></td>");
        var tenderStatusPanel = $("<div></div>");
        tenderStatusPanel.append("<strong modetype='tenderStatusLabel'>" + getTenderStatusById(claim.TenderStatus).Value + "</strong>");
        element.append(tenderStatusCell);
        tenderStatusCell.append(tenderStatusPanel);
        if (settings.changeTenderStatus && claim.TenderStatus == 1) {
            var butSetTenderStatusWin = $("<a type='button' statusValue='2' modetype='butSetTenderStatusWin' class='btn-link btn-sm success' title='Выигран' data-toggle='tooltip'><i class='fa fa-thumbs-o-up'></i></a>");
            var butSetTenderStatusLose = $("<a type='button' statusValue='3' modetype='butSetTenderStatusLose' class='btn-link btn-sm danger' title='Проигран' data-toggle='tooltip'><i class='fa fa-thumbs-o-down'></i></a>");
            var butSetTenderStatusReject = $("<a type='button' statusValue='4' modetype='butSetTenderStatusReject' class='btn-link btn-sm warning' title='Отказ' data-toggle='tooltip'><i class='fa fa-ban'></i></a>");
            //tenderStatusPanel.append("<br/>");
            tenderStatusPanel.append(butSetTenderStatusWin);
            //tenderStatusPanel.append("<br/>");
            tenderStatusPanel.append(butSetTenderStatusLose);
            //tenderStatusPanel.append("<br/>");
            tenderStatusPanel.append(butSetTenderStatusReject);
            butSetTenderStatusWin.click(changeTenderStatus);
            butSetTenderStatusLose.click(changeTenderStatus);
            butSetTenderStatusReject.click(changeTenderStatus);
        }
        element.append("<td><span>" + claim.Author.ShortName + "<span/></td>");
        var actionCell = $("<td class='min-width'></td>");
        element.append(actionCell);
        if (settings.deleteClaim != "none") {
            if (settings.deleteClaim == "true" || ((settings.deleteClaim == "self" || settings.deleteClaim == "self&manager") && claim.Author.Id == settings.userId)
                || (settings.deleteClaim == "self&manager" && claim.Manager.Id == settings.userId)) {
                var deleteButton = $("<button type='button' class='btn btn-link btn-lg' data-toggle='tooltip' title='удалить'><i class='fa fa-trash'></i></button>");
                deleteButton.click(deleteButtonClick);
                actionCell.append(deleteButton);
            }
        }
        if (settings.clickAction != "null") {
            element.dblclick(function(e) {
                var row = $(e.currentTarget);
                var claimId = row.attr("claimId");
                var href = "";
                if (settings.clickAction == "editClaim") href = "/Claim/Index?claimId=" + claimId;
                if (settings.clickAction == "calculateClaim") href = "/Calc/Index?claimId=" + claim.Id;
                if (href != "") document.location.href = href;
            });
        }
        return element;
    }

    //действия
    function changeTenderStatus(e) {
        var button = $(e.currentTarget);
        var row = button.closest("[type='claimRow']");
        var claimId = row.attr("claimId");
        var status = Number(button.attr("statusValue"));
        messageUi.progressShow();
        $.ajax({
            url: "/Claim/ChangeClaimTenderStatus?idClaim=" + claimId + "&tenderStatus=" + status,
            type: 'GET',
            contentType: 'application/json; charset = utf-8 ',
            success: function(data) {
                messageUi.progressHide();
                if (data.IsComplete) {
                    $("[modetype='tenderStatusLabel']", row).text(getTenderStatusById(status).Value);
                    var butTypes = ["butSetTenderStatusWin", "butSetTenderStatusLose", "butSetTenderStatusReject"];
                    var typesLength = butTypes.length;
                    for (var i = 0; i < typesLength; i++) {
                        var type = butTypes[i];
                        $("[modetype='" + type + "']", row).hide();
                    }
                } else {
                    alert("Ошибка при изменении статуса конкурса");
                }
            }
        });
    }

    function deleteButtonClick(e) {
        var button = $(e.currentTarget);
        var row = button.parent().parent();
        var initalBackGround = row.css("background-color");
        row.css("background-color", "#EAA4A4");
        var deleteConfirm = confirm("Удалить выделенную заявку?");
        row.css("backgroundColor", initalBackGround);
        if (deleteConfirm) {
            messageUi.progressShow();
            var id = row.attr("claimId");
            $.ajax({
                url: "/Claim/DeleteClaim?id=" + id,
                type: 'GET',
                contentType: 'application/json; charset = utf-8 ',
                success: function(data) {
                    messageUi.progressHide();
                    if (data.IsComplete) {
                        row.remove();
                    } else {
                        alert("Запись не удалена");
                    }
                }
            });
        }
    }

    //Вспомогательные мтоды
    function messageHandler(e) {
        var data = e.data;
        var obj = $.parseJSON(data);
        if (obj.type.trim() == "DownloadExcel") {
            if (obj.error == true) {
                if (obj.message != "") {
                    alert(obj.message);
                } else {
                    alert("Ошибка при скачивании файла!");
                }
            }
        }
    }

    function containsProduct(managers, id) {
        var managersLength = managers.length;
        var result = false;
        for (var i = 0; i < managersLength; i++) {
            var model = managers[i];
            if (model.Id == id) {
                result = true;
                break;
            }
        }
        return result;
    }

    function getProductManagersString(managers) {
        var result = "";
        if (managers == null) return result;
        var managersLength = managers.length;
        for (var i = 0; i < managersLength; i++) {
            var manager = managers[i];
            result += manager.ShortName + " " + manager.PositionsCount + "/" + manager.CalculatesCount + "<br/>";
        }
        if (result.length > 4) {
            result = result.substr(0, result.length - 5);
        }
        return result;
    }

    function getDealTypeById(id) {
        id = Number(id);
        var dealType = null;
        var dealTypesLength = dealTypes.length;
        for (var i = 0; i < dealTypesLength; i++) {
            var model = dealTypes[i];
            if (model.Id == id) {
                dealType = model;
                break;
            }
        }
        return dealType;
    }

    function getClaimStatusById(id) {
        id = Number(id);
        var status = null;
        var statusLength = claimStatus.length;
        for (var i = 0; i < statusLength; i++) {
            var model = claimStatus[i];
            if (model.Id == id) {
                status = model;
                break;
            }
        }
        return status;
    }

    function getTenderStatusById(id) {
        id = Number(id);
        var status = null;
        var statusLength = tenderStatus.length;
        for (var i = 0; i < statusLength; i++) {
            var model = tenderStatus[i];
            if (model.Id == id) {
                status = model;
                break;
            }
        }
        return status;
    }
</script>

<div>
    <div class="panel-group" id="accordion">
        <div class="panel panel-default" id="filter">
            <div id="filterPanel" class="panel-collapse collapse">
                <div class="panel-body">
                    <div class="form-horizontal val-form" role="form">
                        <div class="form-group">
                            <label class="col-sm-2 control-label">ID</label>
                            <div class="col-sm-10">
                                <input type="text" id="filterIdClaim" class="form-control input-sm" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-sm-2 control-label">№ конкурса</label>
                            <div class="col-sm-10">
                                <input type="text" id="filterTenderNumber" class="form-control input-sm" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-sm-2 control-label">Статус заявки</label>
                            <div class="col-sm-10" id="filterClaimStatusPanel">
                                <input type="checkbox" id="filterClaimStatusCreated" value="1" /><span>Создано</span>
                                <input type="checkbox" id="filterClaimStatusTransmissed" value="2" /><span>Передано</span>
                                <input type="checkbox" id="filterClaimStatusInWork" value="3" /><span>В работе</span>
                                <input type="checkbox" id="filterClaimStatusStopped" value="4" /><span>Приостановлено</span>
                                <input type="checkbox" id="filterClaimStatusCancelled" value="5" /><span>Отменено</span>
                                <input type="checkbox" id="filterClaimStatusSameCalculated" value="6" /><span>Частично расчитано</span>
                                <input type="checkbox" id="filterClaimStatusCalculated" value="7" /><span>Расчитано</span>
                                <input type="checkbox" id="filterClaimStatusConfirmed" value="8" /><span>Подтверждено</span>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-sm-2 control-label">Просрочено</label>
                            <div class="col-sm-10">
                                <div class="input-sm">
                                    <input type="radio" name="filterClaimOverdue" id="filterClaimOverdueNot" value="not" checked> все
                                    <input type="radio" name="filterClaimOverdue" id="filterClaimOverdueYes" value="yes"> да
                                    <input type="radio" name="filterClaimOverdue" id="filterClaimOverdueNo" value="no"> нет
                                </div>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-sm-2 control-label">Менеджер</label>
                            <div class="col-sm-10">
                                <select size="1" id="filterManagers" class="form-control input-sm"></select>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-sm-2 control-label">Снабженец</label>
                            <div class="col-sm-10">
                                <select size="1" id="filterProductManagers" class="form-control input-sm"></select>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-sm-2 control-label">Подразделение</label>
                            <div class="col-sm-10">
                                <select size="1" id="filterManagerSubDivisions" class="form-control input-sm"></select>
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-sm-2 control-label">Срок сдачи</label>
                            <div class="col-sm-2">
                                <input type="text" id="filterTenderStartFrom" style="cursor: pointer;" class="form-control datepicker-btn input-sm" />
                            </div>
                            <div class="col-sm-2">
                                <input type="text" id="filterTenderStartTo" style="cursor: pointer;" class="form-control datepicker-btn input-sm" />
                            </div>
                        </div>
                        <div class="form-group">
                            <label class="col-sm-2 control-label">Показать записей</label>
                            <div class="col-sm-10">
                                <input type="text" id="filterRowCount" class="form-control input-sm" value="10" />
                            </div>
                        </div>
                        <div class="form-group">
                            <div class="col-sm-offset-2 col-sm-10">
                                <button type="button" id="acceptFilter" class="btn btn-primary"><i class="fa fa-search"></i>&nbsp;найти</button>
                                <button type="button" id="clearFilter" class="btn btn-default"><i class="fa fa-repeat"></i>&nbsp;очистить</button>
                                <button type="button" id="saveFilterInExcel" class="btn btn-default"><i class="fa fa-download"></i>&nbsp;в Excel</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div id="filterHead" class="panel-heading">
                <div class="panel-title collapsed" data-toggle="collapse" data-target="#filterPanel">
                    <a class="title"><i class="fa fa-filter"></i></a>
                </div>
            </div>
        </div>
        <h5>
            <span class="label label-default">
                Всего записей:
                <span id="claimCountLabel">@claimCount</span>
            </span>
            &nbsp;
            <span class="label label-info">
                из них показано:
                <span id="showCountLabel"></span>
            </span>
        </h5>
        <table class="table table-striped small">
            <thead>
            <tr>
                <th class="min-width text-nowrap"></th>
                <th>ID</th>
                <th>№ Конкурса</th>
                <th>Контрагент</th>
                <th>Сумма</th>
                <th>Менеджер</th>
                <th>Позиции</th>
                <th>Снабженцы</th>
                <th>Тип сделки</th>
                <th>Статус</th>
                <th>Создано</th>
                <th>Срок сдачи</th>
                <th>Статус<br />конкурса</th>
                <th>Автор</th>
                <th></th>
            </tr>
            </thead>
            <tbody id="claimTable">
            
            </tbody>
        </table>
    </div>
</div>

